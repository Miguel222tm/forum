/**
 * @ngdoc overview
 * @name app
 * @description
 * # app
 *
 * Main module of the application.
 */

    angular
      .module('app', [
        'UURootService',
        'ngAnimate',
        'ngAria',
        'ngResource',
        'ngSanitize',
        'ngTouch',
        'ngMaterial',
        'ngStorage',
        'ngStore',
        'ui.router',
        'ui.utils',
        'ui.load',
        'ui.jp',
        'oc.lazyLoad',
        'satellizer',
        'growlNotifications'
      ]);

// put your config code here

// lazyload config

    angular
      .module('app')
      .constant('MODULE_CONFIG', [
          {
              name: 'mgcrea.ngStrap',
              module: true,
              serie: true,
              files: [
                  '../assets/angular-motion/dist/angular-motion.min.css',
                  '../assets/bootstrap-additions/dist/bootstrap-additions.min.css',
                  '../libs/angular/angular-strap/dist/angular-strap.js',
                  '../libs/angular/angular-strap/dist/angular-strap.tpl.js'
              ]
          },
          {
              name: 'ui.bootstrap',
              module: true,
              serie: true,
              files: [
                  '../libs/angular/angular-bootstrap/ui-bootstrap-tpls.min.js',
                  '../libs/angular/angular-bootstrap/ui-bootstrap-tpls.js'
              ]
          },
          {
              name: 'ui.select',
              module: true,
              files: [
                  '../libs/angular/angular-ui-select/dist/select.min.js',
                  '../libs/angular/angular-ui-select/dist/select.min.css'
              ]
          },
          {
              name: 'vr.directives.slider',
              module: true,
              files: [
                  '../libs/angular/venturocket-angular-slider/build/angular-slider.min.js',
                  '../libs/angular/venturocket-angular-slider/angular-slider.css'
              ]
          },
          {
              name: 'angularBootstrapNavTree',
              module: true,
              files: [
                  '../libs/angular/angular-bootstrap-nav-tree/dist/abn_tree_directive.js',
                  '../libs/angular/angular-bootstrap-nav-tree/dist/abn_tree.css'
              ]
          },
          {
              name: 'angularFileUpload',
              module: true,
              files: [
                  '../libs/angular/angular-file-upload/angular-file-upload.js'
              ]
          },
          {
              name: 'ngImgCrop',
              module: true,
              files: [
                  '../libs/angular/ngImgCrop/compile/minified/ng-img-crop.js',
                  '../libs/angular/ngImgCrop/compile/minified/ng-img-crop.css'
              ]
          },
          {
              name: 'smart-table',
              module: true,
              files: [
                  '../libs/angular/angular-smart-table/dist/smart-table.min.js'
              ]
          },
          {
              name: 'ui.map',
              module: true,
              files: [
                  '../libs/angular/angular-ui-map/ui-map.js'
              ]
          },
          {
              name: 'ui.grid',
              module: true,
              files: [
                  '../libs/angular/angular-ui-grid/ui-grid.min.js',
                  '../libs/angular/angular-ui-grid/ui-grid.min.css',
                  '../libs/angular/angular-ui-grid/ui-grid.bootstrap.css'
              ]
          },
          {
              name: 'xeditable',
              module: true,
              files: [
                  '../libs/angular/angular-xeditable/dist/js/xeditable.min.js',
                  '../libs/angular/angular-xeditable/dist/css/xeditable.css'
              ]
          },
          {
              name: 'smart-table',
              module: true,
              files: [
                  '../libs/angular/angular-smart-table/dist/smart-table.min.js'
              ]
          },
          {
              name:'ui.calendar',
              module: true,
              files: ['../libs/angular/angular-ui-calendar/src/calendar.js']
          },
          {
              name:'summernote',
              module: true,
              files: [
                '../libs/jquery/summernote/dist/summernote.css',
                '../libs/jquery/summernote/dist/summernote.js',
                '../libs/angular/angular-summernote/dist/angular-summernote.js'
              ]
          },
          {
              name: 'dataTable',
              module: false,
              files: [
                  '../libs/jquery/datatables/media/js/jquery.dataTables.min.js',
                  '../libs/jquery/plugins/integration/bootstrap/3/dataTables.bootstrap.js',
                  '../libs/jquery/plugins/integration/bootstrap/3/dataTables.bootstrap.css'
              ]
          },
          {
              name: 'footable',
              module: false,
              files: [
                  '../libs/jquery/footable/dist/footable.all.min.js',
                  '../libs/jquery/footable/css/footable.core.css'
              ]
          },
          {
              name: 'easyPieChart',
              module: false,
              files: [
                  '../libs/jquery/jquery.easy-pie-chart/dist/jquery.easypiechart.fill.js'
              ]
          },
          {
              name: 'sparkline',
              module: false,
              files: [
                  '../libs/jquery/jquery.sparkline/dist/jquery.sparkline.retina.js'
              ]
          },
          {
              name: 'plot',
              module: false,
              files: [
                  '../libs/jquery/flot/jquery.flot.js',
                  '../libs/jquery/flot/jquery.flot.resize.js',
                  '../libs/jquery/flot/jquery.flot.pie.js',
                  '../libs/jquery/flot.tooltip/js/jquery.flot.tooltip.min.js',
                  '../libs/jquery/flot-spline/js/jquery.flot.spline.min.js',
                  '../libs/jquery/flot.orderbars/js/jquery.flot.orderBars.js'
              ]
          },
          {
              name: 'vectorMap',
              module: false,
              files: [
                  '../libs/jquery/bower-jvectormap/jquery-jvectormap-1.2.2.min.js',
                  '../libs/jquery/bower-jvectormap/jquery-jvectormap.css', 
                  '../libs/jquery/bower-jvectormap/jquery-jvectormap-world-mill-en.js',
                  '../libs/jquery/bower-jvectormap/jquery-jvectormap-us-aea-en.js'
              ]
          },
          {
              name: 'moment',
              module: false,
              files: [
                  '../libs/js/moment/moment.js'
              ]
          },
          {
              name: 'fullcalendar',
              module: false,
              files: [
                  '../libs/jquery/moment/moment.js',
                  '../libs/jquery/fullcalendar/dist/fullcalendar.min.js',
                  '../libs/jquery/fullcalendar/dist/fullcalendar.css',
                  '../libs/jquery/fullcalendar/dist/fullcalendar.theme.css'
              ]
          },
          {
              name: 'sortable',
              module: false,
              files: [
                  '../libs/jquery/html.sortable/dist/html.sortable.min.js'
              ]
          },
          {
              name: 'nestable',
              module: false,
              files: [
                  '../libs/jquery/nestable/jquery.nestable.css',
                  '../libs/jquery/nestable/jquery.nestable.js'
              ]
          },
          {
              name: 'chart',
              module: false,
              files: [
                  '../libs/js/echarts/build/dist/echarts-all.js',
                  '../libs/js/echarts/build/dist/theme.js',
                  '../libs/js/echarts/build/dist/jquery.echarts.js'
              ]
          }
        ]
      )
      .config(['$ocLazyLoadProvider', 'MODULE_CONFIG', function($ocLazyLoadProvider, MODULE_CONFIG) {
          $ocLazyLoadProvider.config({
              debug: false,
              events: false,
              modules: MODULE_CONFIG
          });
      }]);


/**
 * @ngdoc function
 * @name app.config:uiRouter
 * @description
 * # Config
 * Config for the router
 */

    angular
      .module('app')
      .run(runBlock)
      .config(config);

      runBlock.$inject = ['$rootScope', '$state', '$stateParams'];
      function runBlock($rootScope,   $state,   $stateParams) {
          $rootScope.$state = $state;
          $rootScope.$stateParams = $stateParams;
          // $stateChangeStart is fired whenever the state changes. We can use some parameters
          // such as toState to hook into details about the state as it is changing
          $rootScope.$on('$stateChangeStart', function(event, toState) {

             
            // Putting the user's data on $rootScope allows
            // us to access it anywhere across the app. Here
            // we are grabbing what is in local storage
            if($rootScope.currentUser) {
                //console.log('$rootScope======',$rootScope.currentUser);

                // The user's authenticated state gets flipped to
                // true so we can now show parts of the UI that rely
                // on the user being logged in
                $rootScope.authenticated = true;

                // If the user is logged in and we hit the auth route we don't need
                // to stay there and can send the user to the main state
                if(toState.name === "access.signin" || toState.name === "access.signup") {

                // Preventing the default behavior allows us to use $state.go
                // to change states
                event.preventDefault();
                
                // go to the "main" state which in our case is users
                $state.go('app.home');
                }       
             }
          });   
      }

      config.$inject =  ['$stateProvider', '$urlRouterProvider', 'MODULE_CONFIG','$authProvider','$httpProvider','$provide'];
      function config( $stateProvider,   $urlRouterProvider,   MODULE_CONFIG, $authProvider,$httpProvider, $provide ) {

        function redirectWhenLoggedOut($q, $injector) {
         return {
            responseError: function(rejection) {
               // Need to use $injector.get to bring in $state or else we get
               // a circular dependency error
               var $state = $injector.get('$state');
               // Instead of checking for a status code of 400 which might be used
               // for other reasons in Laravel, we check for the specific rejection
               // reasons to tell us if we need to redirect to the login state
               var rejectionReasons = ['token_not_provided', 'token_expired', 'token_absent', 'token_invalid'];
               // Loop through each rejection reason and redirect to the login
               // state if one is encountered
               angular.forEach(rejectionReasons, function(value, key) {
                  if(rejection.data){
                    if(rejection.data.error === value) {
                      // Send the user to the auth state so they can login
                      $state.go('access.signin');
                    }
                  }
               });
                  return $q.reject(rejection);
            }
         };
        }

        //$authProvider.httpInterceptor = false;
        // Setup for the $httpInterceptor
        $provide.factory('redirectWhenLoggedOut', redirectWhenLoggedOut);

        // Push the new factory onto the $http interceptor array
        $httpProvider.interceptors.push('redirectWhenLoggedOut');
        $authProvider.loginUrl = '/authenticate';

        $authProvider.facebook({
          clientId: '193867407627493'
        });
        
        $authProvider.google({
          clientId: '325516560821-2i72bk8rgf5av8rn9vha6qg7id86fo6l.apps.googleusercontent.com'
        });
        $authProvider.linkedin({
          clientId: '77klqbzj550pjv'
        });
        
        var p = getParams('layout'),
            l = p ? p + '.' : '',
            layout = 'views/layout/layout.'+l+'html',
            dashboard = 'views/dashboard/dashboard.'+l+'html';

        $urlRouterProvider
          .otherwise('/app/dashboard');
        $stateProvider
          .state('app', {
            abstract: true,
            url: '/app',
            views: {
              '': {
                templateUrl: layout, 
                controller: 'MainController as main'
              }
            }
          })
            .state('app.dashboard', {
              url: '/dashboard',
              templateUrl: dashboard,
              data : { title: 'Dashboard' },
              controller: "ChartCtrl",
              resolve: load(['scripts/controllers/chart.js'])
            })

            .state('app.home', {
              url: '/home',
              templateUrl: 'views/page/home.html', 
              data: { title: 'Home' } ,
              controller: 'homeCtrl',  
            })
            .state('app.items', {
              url: '/items',
              templateUrl: 'views/page/items.html', 
              data: { title: 'Items' } ,
              controller: 'itemsCtrl',  
            })

            .state('app.search', {
              url: '/search',
              templateUrl: 'views/page/search.html', 
              data: { title: 'Search' } ,
              controller: 'searchCtrl',  
            })

            .state('app.nearby', {
              url: '/nearby',
              templateUrl: 'views/page/near-by.html', 
              data: { title: 'Near by' } ,
              controller: 'nearByCtrl',  
            })

            .state('app.myproducts', {
              url: '/myproducts',
              templateUrl: 'views/page/my-products.html', 
              data: { title: 'My products' } ,
              controller: 'myProductsCtrl',  
            })

            .state('app.mybids', {
              url: '/mybids',
              templateUrl: 'views/page/my-bids.html', 
              data: { title: 'My bids' } ,
              controller: 'myBidsCtrl',  
            })

            .state('app.club', {
              url: '/club',
              templateUrl: 'views/page/club.html', 
              data: { title: 'Category/Clubs'} ,
              controller: 'clubCtrl',  
            })
            .state('app.modelo', {
              url: '/club/modelo',
              templateUrl: 'views/page/club-modelo.html', 
              data: { title: 'Club' } ,
              controller: 'clubModeloCtrl',  
            })

            .state('app.categories', {
              url: '/categories',
              templateUrl: 'views/page/categories.html', 
              data: { title: 'Categories' } ,
              controller: 'categoriesCtrl',  
            })

            .state('app.requests', {
              url: '/requests',
              templateUrl: 'views/page/user-requests.html', 
              data: { title: 'User Requests' } ,
              controller: 'userRequestsCtrl',  
            })
            .state('app.members', {
              url: '/users/members',
              templateUrl: 'views/page/members.html', 
              data: { title: 'Members' } ,
              controller: 'membersListCtrl',  
            })
            .state('app.vendors', {
              url: '/users/vendors',
              templateUrl: 'views/page/vendors.html', 
              data: { title: 'Vendors' } ,
              controller: 'vendorsListCtrl',  
            })




            // applications

            .state('app.contact', {
              url: '/contact',
              templateUrl: 'apps/contact/main.html',
              data : { title: 'Contacts', hideFooter: true },
              controller: 'ContactCtrl',
              resolve: load('apps/contact/contact.js')
            })

            .state('app.calendar', {
              url: '/calendar',
              templateUrl: 'apps/calendar/main.html',
              data : { title: 'Calendar' },
              controller: 'FullcalendarCtrl',
              resolve: load(['moment','fullcalendar','ui.calendar','apps/calendar/calendar.js'])
            })

            .state('app.todo', {
              url: '/todo',
              templateUrl: 'apps/todo/todo.html',
              data : { title: 'Todo' },
              controller: 'TodoCtrl',
              resolve: load('apps/todo/todo.js')
            })
            .state('app.todo.list', {
                url: '/{fold}'
            })

            .state('app.note', {
              url: '/note',
              templateUrl: 'apps/note/main.html',
              data : { title: 'Note', hideFooter: true }
            })
            .state('app.note.list', {
              url: '/list',
              templateUrl: 'apps/note/list.html',
              data : { title: 'Note'},
              controller: 'NoteCtrl',
              resolve: load(['apps/note/note.js', 'moment'])
            })
            .state('app.note.item', {
              url: '/{id}',
              views: {
                '': {
                  templateUrl: 'apps/note/item.html',
                  controller: 'NoteItemCtrl',
                  resolve: load(['apps/note/note.js', 'moment'])
                }
              },
              data : { title: 'Note' }
            })

            // ui router
            .state('app.layout', {
              url: '/layout',
              template: '<div ui-view></div>'
            })
              .state('app.layout.header', {
                url: '/header',
                templateUrl: 'views/ui/headers.html',
                data : { title: 'Headers' }
              })
              .state('app.layout.aside', {
                url: '/aside',
                templateUrl: 'views/ui/asides.html',
                data : { title: 'Asides' }
              })
              .state('app.layout.footer', {
                url: '/footer',
                templateUrl: 'views/ui/footers.html',
                data : { title: 'Footers' }
              })

            .state('app.inbox', {
                url: '/inbox',
                templateUrl: 'apps/inbox/main.html',
                data : { title: 'Inbox'},
                controller: 'MainCtrl',
                resolve: load( ['apps/inbox/inbox.js','moment'] )
            })
            .state('app.inbox.list', {
                url: '/inbox/{fold}',
                templateUrl: 'apps/inbox/list.html',
                controller: 'ListCtrl'
            })
            .state('app.inbox.item', {
                url: '/{id:[0-9]{1,4}}',
                templateUrl: 'apps/inbox/item.html',
                controller: 'DetailCtrl'
            })
            .state('app.inbox.compose', {
                url: '/compose',
                templateUrl: 'apps/inbox/new.html',
                controller: 'NewCtrl',
                resolve: load( ['summernote', 'ui.select'] )
            })

            // widget router
            .state('app.widget', {
              url: '/widget',
              templateUrl: 'views/ui/widget.html',
              data : { title: 'Widgets' }
            })

            // ui router
            .state('app.ui', {
              url: '/ui',
              template: '<div ui-view></div>'
            })
              .state('app.ui.arrow', {
                url: '/arrow',
                templateUrl: 'views/ui/arrow.html',
                data : { title: 'Arrows' }
              })
              .state('app.ui.box', {
                url: '/box',
                templateUrl: 'views/ui/box.html',
                data : { title: 'Box' }
              })
              .state('app.ui.label', {
                url: '/label',
                templateUrl: 'views/ui/label.html',
                data : { title: 'Labels' }
              })
              .state('app.ui.button', {
                url: '/button',
                templateUrl: 'views/ui/button.html',
                data : { title: 'Buttons' }
              })
              .state('app.ui.color', {
                url: '/color',
                templateUrl: 'views/ui/color.html',
                data : { title: 'Colors' }
              })
              .state('app.ui.dropdown', {
                url: '/dropdown',
                templateUrl: 'views/ui/dropdown.html',
                data : { title: 'Dropdowns' }
              })
              .state('app.ui.grid', {
                url: '/grid',
                templateUrl: 'views/ui/grid.html',
                data : { title: 'Grids' }
              })
              .state('app.ui.icon', {
                url: '/icons',
                templateUrl: 'views/ui/icon.html',
                data : { title: 'Icons' }
              })
              .state('app.ui.list', {
                url: '/list',
                templateUrl: 'views/ui/list.html',
                data : { title: 'Lists' }
              })
              .state('app.ui.modal', {
                url: '/modal',
                templateUrl: 'views/ui/modal.html',
                data : { title: 'Modals' }
              })
              .state('app.ui.nav', {
                url: '/nav',
                templateUrl: 'views/ui/nav.html',
                data : { title: 'Navs' }
              })
              .state('app.ui.progress', {
                url: '/progress',
                templateUrl: 'views/ui/progress.html',
                data : { title: 'Progress' }
              })
              .state('app.ui.social', {
                url: '/social',
                templateUrl: 'views/ui/social.html',
                data : { title: 'Social' }
              })
              .state('app.ui.sortable', {
                url: '/sortable',
                templateUrl: 'views/ui/sortable.html',
                data : { title: 'Sortable' }
              })
              .state('app.ui.streamline', {
                url: '/streamline',
                templateUrl: 'views/ui/streamline.html',
                data : { title: 'Streamlines' }
              })
              .state('app.ui.timeline', {
                url: '/timeline',
                templateUrl: 'views/ui/timeline.html',
                data : { title: 'Timelines' }
              })
              .state('app.ui.angularstrap', {
                url: '/angularstrap',
                templateUrl: 'views/ui/ng.angularstrap.html',
                data : { title: 'AngularStrap' },
                resolve: load(['mgcrea.ngStrap','scripts/controllers/angularstrap.js'])
              })
              .state('app.ui.bootstrap', {
                url: '/bootstrap',
                templateUrl: 'views/ui/ng.bootstrap.html',
                data : { title: 'UI Bootstrap' },
                resolve: load(['ui.bootstrap','scripts/controllers/bootstrap.js'])
              })
              .state('app.googlemap', {
                url: '/googlemap',
                templateUrl: 'views/ui/map.google.html',
                data : { title: 'Gmap', hideFooter: true },
                controller: 'GoogleMapCtrl',
                //resolve: load(['ui.map', 'scripts/controllers/googlemap.js'], function(){ })
                resolve: load(['ui.map', 'scripts/controllers/load-google-maps.js', 'scripts/controllers/googlemap.js'], function(){ return loadGoogleMaps(); })
              })
              .state('app.ui.vectormap', {
                url: '/vectormap',
                templateUrl: 'views/ui/map.vector.html',
                data : { title: 'Vector Map' },
                controller: 'ChartCtrl',
                resolve: load('scripts/controllers/chart.js')
              })

            // form routers
            .state('app.form', {
              url: '/form',
              template: '<div ui-view></div>'
            })
              .state('app.form.layout', {
                url: '/layout',
                templateUrl: 'views/form/form.layout.html',
                data : { title: 'Layouts' }
              })
              .state('app.form.element', {
                url: '/element',
                templateUrl: 'views/form/form.element.html',
                data : { title: 'Elements' }
              })              
              .state('app.form.validation', {
                url: '/validation',
                templateUrl: 'views/form/ng.validation.html',
                data : { title: 'Validations' }
              })
              .state('app.form.select', {
                url: '/select',
                templateUrl: 'views/form/ng.select.html',
                data : { title: 'Selects' },
                controller: 'SelectCtrl',
                resolve: load(['ui.select','scripts/controllers/select.js'])
              })
              .state('app.form.editor', {
                url: '/editor',
                templateUrl: 'views/form/ng.editor.html',
                data : { title: 'Editor' },
                controller: 'EditorCtrl',
                resolve: load(['summernote','scripts/controllers/editor.js'])
              })
              .state('app.form.slider', {
                url: '/slider',
                templateUrl: 'views/form/ng.slider.html',
                data : { title: 'Slider' },
                controller: 'SliderCtrl',
                resolve: load(['vr.directives.slider','scripts/controllers/slider.js'])
              })
              .state('app.form.tree', {
                url: '/tree',
                templateUrl: 'views/form/ng.tree.html',
                data : { title: 'Tree' },
                controller: 'TreeCtrl',
                resolve: load(['angularBootstrapNavTree','scripts/controllers/tree.js'])
              })
              .state('app.form.file-upload', {
                url: '/file-upload',
                templateUrl: 'views/form/ng.file-upload.html',
                data : { title: 'File upload' },
                controller: 'UploadCtrl',
                resolve: load(['angularFileUpload', 'scripts/controllers/upload.js'])
              })
              .state('app.form.image-crop', {
                url: '/image-crop',
                templateUrl: 'views/form/ng.image-crop.html',
                data : { title: 'Image Crop' },
                controller: 'ImgCropCtrl',
                resolve: load(['ngImgCrop','scripts/controllers/imgcrop.js'])
              })
              .state('app.form.editable', {
                url: '/editable',
                templateUrl: 'views/form/ng.xeditable.html',
                data : { title: 'Xeditable' },
                controller: 'XeditableCtrl',
                resolve: load(['xeditable','scripts/controllers/xeditable.js'])
              })

            // table routers
            .state('app.table', {
              url: '/table',
              template: '<div ui-view></div>'
            })
              .state('app.table.static', {
                url: '/static',
                templateUrl: 'views/table/static.html',
                data : { title: 'Static' }
              })
              .state('app.table.datatable', {
                url: '/datatable',
                data : { title: 'Datatable' },
                templateUrl: 'views/table/datatable.html'
              })
              .state('app.table.footable', {
                url: '/footable',
                data : { title: 'Footable' },
                templateUrl: 'views/table/footable.html'
              })
              .state('app.table.smart', {
                url: '/smart',
                templateUrl: 'views/table/ng.smart.html',
                data : { title: 'Smart' },
                controller: 'TableCtrl',
                resolve: load(['smart-table', 'scripts/controllers/table.js'])
              })
              .state('app.table.uigrid', {
                url: '/uigrid',
                templateUrl: 'views/table/ng.uigrid.html',
                data : { title: 'UI Grid' },
                controller: "UiGridCtrl",
                resolve: load(['ui.grid', 'scripts/controllers/uigrid.js'])
              })
              .state('app.table.editable', {
                url: '/editable',
                templateUrl: 'views/table/ng.editable.html',
                data : { title: 'Editable' },
                controller: 'XeditableCtrl',
                resolve: load(['xeditable','scripts/controllers/xeditable.js'])
              })

            // chart
            .state('app.chart', {
              url: '/chart',
              templateUrl: 'views/chart/chart.html',
              data : { title: 'Charts' },
              controller: "ChartCtrl",
              resolve: load('scripts/controllers/chart.js')
            })
            .state('app.echarts', {
              url: '/echarts',
              template: '<div ui-view></div>'
            })
            .state('app.echarts.line', {
              url: '/line',
              templateUrl: 'views/chart/echarts-line.html',
              data : { title: 'Echarts Line' }
            })
            .state('app.echarts.bar', {
              url: '/bar',
              templateUrl: 'views/chart/echarts-bar.html',
              data : { title: 'Echarts Bar' }
            })
            .state('app.echarts.pie', {
              url: '/pie',
              templateUrl: 'views/chart/echarts-pie.html',
              data : { title: 'Echarts Pie' }
            })
            .state('app.echarts.scatter', {
              url: '/scatter',
              templateUrl: 'views/chart/echarts-scatter.html',
              data : { title: 'Echarts Scatter' }
            })
            .state('app.echarts.rc', {
              url: '/rc',
              templateUrl: 'views/chart/echarts-radar-chord.html',
              data : { title: 'Radar & Chord' }
            })
            .state('app.echarts.gf', {
              url: '/gf',
              templateUrl: 'views/chart/echarts-gauge-funnel.html',
              data : { title: 'Gauge & Funnel' }
            })
            .state('app.echarts.map', {
              url: '/map',
              templateUrl: 'views/chart/echarts-map.html',
              data : { title: 'Map' }
            })

          .state('app.page', {
            url: '/page',
            template: '<div ui-view></div>'
          })
            .state('app.page.profile', {
              url: '/profile',
              templateUrl: 'views/page/profile.html',
              data : { title: 'Profile' }
            })
            .state('app.page.setting', {
              url: '/setting',
              templateUrl: 'views/page/setting.html',
              controller: 'SettingsCtrl',
              data : { title: 'Setting' }
            })
            .state('app.page.search', {
              url: '/search',
              templateUrl: 'views/page/search.html',
              data : { title: 'Search' }
            })
            .state('app.page.faq', {
              url: '/faq',
              templateUrl: 'views/page/faq.html',
              data : { title: 'FAQ' }
            })
            .state('app.page.gallery', {
              url: '/gallery',
              templateUrl: 'views/page/gallery.html',
              data : { title: 'Gallery' }
            })
            .state('app.page.invoice', {
              url: '/invoice',
              templateUrl: 'views/page/invoice.html',
              data : { title: 'Invoice' }
            })
            .state('app.page.price', {
              url: '/price',
              templateUrl: 'views/page/price.html',
              data : { title: 'Price' }
            })
            .state('app.page.blank', {
              url: '/blank',
              templateUrl: 'views/page/blank.html',
              data : { title: 'Blank' }
            })
            .state('app.docs', {
              url: '/docs',
              templateUrl: 'views/page/docs.html',
              data : { title: 'Documents' }
            })
            .state('404', {
              url: '/404',
              templateUrl: 'views/misc/404.html'
            })
            .state('505', {
              url: '/505',
              templateUrl: 'views/misc/505.html'
            })
            .state('access', {
              url: '/access',
              template: '<div class="bg-auto w-full"><div ui-view class="fade-in-right-big smooth pos-rlt"></div></div>'
            })
            .state('access.signin', {
              url: '/signin',
              templateUrl: 'views/misc/signin.html', 
              controller: 'AuthController'
            })
            .state('access.signup', {
              url: '/signup',
              templateUrl: 'views/misc/signup.html', 
              controller: 'AuthController'
            })
            .state('access.confirm', {
              url: '/confirm/:code', 
              templateUrl: '/views/misc/confirm-account.html', 
              controller: 'confirmCtrl'
            })
            .state('access.select-user',{
              url: '/select-user', 
              templateUrl: 'views/pages/select-user.html',
              controller: 'LimboCtrl'
            })
            .state('access.forgot-password', {
              url: '/forgot-password',
              templateUrl: 'views/misc/forgot-password.html', 
              controller: 'forgotPasswordCtrl'
            })
            .state('change-password', {
              url: '/change-password/:code',
              templateUrl: 'views/pages/change-password.html',
              controller: 'forgotPasswordCtrl'
            })
            

            .state('access.lockme', {
              url: '/lockme',
              templateUrl: 'views/misc/lockme.html'
            });

        $httpProvider.interceptors.push(["$q", "$location", "$localStorage",'$rootScope', function ($q, $location, $localStorage, $rootScope) {
            return {
              "request": function (config) {
                
                
                config.headers = config.headers || {};
                if ($localStorage.token){
                  config.headers.Authorization = "Bearer " + $localStorage.token;
                }
                return config;
              },
              "responseError": function (response) {
                //console.log('responseError', response);
                if (response.status === 401 || response.status === 403) {
                  $location.path("/access/signin");
              }
              return $q.reject(response);
              }
            };
        }]);


        function load(srcs, callback) {
          return {
              deps: ['$ocLazyLoad', '$q',
                function( $ocLazyLoad, $q ){
                  var deferred = $q.defer();
                  var promise  = false;
                  srcs = angular.isArray(srcs) ? srcs : srcs.split(/\s+/);
                  if(!promise){
                    promise = deferred.promise;
                  }
                  angular.forEach(srcs, function(src) {
                    promise = promise.then( function(){
                      angular.forEach(MODULE_CONFIG, function(module) {
                        if( module.name == src){
                          src = module.module ? module.name : module.files;
                        }
                      });
                      return $ocLazyLoad.load(src);
                    } );
                  });
                  deferred.resolve();
                  return callback ? promise.then(function(){ return callback(); }) : promise;
              }]
          }
        }

        function getParams(name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(location.search);
            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }
      }




/*===================================
=            controllers            =
===================================*/


/*angular
	.module('app')
  	.controller('AuthController', AuthController);
*/

/*=====  End of controllers  ======*/

/**
 * @ngdoc function
 * @name app.controller:AppCtrl
 * @description
 * # MainCtrl
 * Controller of the app
 */
 
    angular
      .module('app')
      .controller('AppCtrl', AppCtrl);

      AppCtrl.$inject  = ['$scope', '$localStorage', '$location', '$rootScope', '$anchorScroll', '$timeout', '$window'];

      function AppCtrl($scope, $localStorage, $location, $rootScope, $anchorScroll, $timeout, $window) {
        var vm = $scope;
        vm.isIE = isIE();
        vm.isSmart = isSmart();
        // config
        vm.app = {
          name: 'Clubmein',
          version: '1.1.0',
          // for chart colors
          color: {
            'primary':      '#0cc2aa',
            'accent':       '#a88add',
            'warn':         '#fcc100',
            'info':         '#6887ff',
            'success':      '#6cc788',
            'warning':      '#f77a99',
            'danger':       '#f44455',
            'white':        '#ffffff',
            'light':        '#f1f2f3',
            'dark':         '#2e3e4e',
            'black':        '#2a2b3c'
          },
          setting: {
            theme: {
              primary: 'primary',
              accent: 'accent',
              warn: 'warn'
            },
            folded: false,
            boxed: false,
            container: false,
            themeID: 1,
            bg: ''
          }
        };

        var setting = vm.app.name+'-Setting';
        // save settings to local storage
        if ( angular.isDefined($localStorage[setting]) ) {
          vm.app.setting = $localStorage[setting];
        } else {
          $localStorage[setting] = vm.app.setting;
        }
        // watch changes
        $scope.$watch('app.setting', function(){
          $localStorage[setting] = vm.app.setting;
        }, true);

        getParams('bg') && (vm.app.setting.bg = getParams('bg'));

        vm.setTheme = setTheme;
        setColor();
        
        function setTheme(theme){
          vm.app.setting.theme = theme.theme;
          setColor();
          if(theme.url){
            $timeout(function() {
              $window.location.href = theme.url;
            }, 100, false);
          }
        };

        function setColor(){
          vm.app.setting.color = {
            primary: getColor(vm.app.setting.theme.primary),
            accent: getColor(vm.app.setting.theme.accent),
            warn: getColor(vm.app.setting.theme.warn)
          };
        };

        function getColor(name){
          return vm.app.color[ name ] ? vm.app.color[ name ] : palette.find(name);
        };

        $rootScope.$on('$stateChangeSuccess', openPage);

        function openPage() {
          // goto top
          $location.hash('content');
          $anchorScroll();
          $location.hash('');
          // hide open menu
          $('#aside').modal('hide');
          $('body').removeClass('modal-open').find('.modal-backdrop').remove();
          $('.navbar-toggleable-sm').collapse('hide');
        };

        vm.goBack = function () {
          $window.history.back();
        };

        function isIE() {
          return !!navigator.userAgent.match(/MSIE/i) || !!navigator.userAgent.match(/Trident.*rv:11\./);
        }

        function isSmart(){
          // Adapted from http://www.detectmobilebrowsers.com
          var ua = $window['navigator']['userAgent'] || $window['navigator']['vendor'] || $window['opera'];
          // Checks for iOs, Android, Blackberry, Opera Mini, and Windows mobile devices
          return (/iPhone|iPod|iPad|Silk|Android|BlackBerry|Opera Mini|IEMobile/).test(ua);
        }

        function getParams(name) {
          name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
          var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
              results = regex.exec(location.search);
          return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }

      }


var accessNav = ['$state', function($state){
	return{
    	restrict: 'E',
		templateUrl: 'views/partials/access-nav.html',
		scope: {
			user: '='
		}, 
		link: function(scope){
			scope.menu = [];
			scope.submenu =[];
			scope.topMenu =[];

			angular.forEach(scope.user.functionalities, function(func, key){
				switch(func.code){
						
					case "fn_home":
						scope.menu.push({
							hierarchy: 1,
							level: 0,
							hidden: false,
							icon: 'fa fa-home',
							label: 'Home',
							state: 'app.home'
						});	
						break;
					case "fn_search":
						scope.menu.push({
							hierarchy: 2,
							level: 0,
							hidden: false,
							icon: 'fa fa-search',
							label: 'Search',
							state: 'app.search'
						});
						break;
					

				}
				if(scope.user.access_level === 1){
					switch(func.code){

						case "fn_items":
						scope.menu.push({
							hierarchy: 3,
							level: 0,
							hidden: false,
							icon: 'fa fa-paper-plane',
							label: 'Items',
							state: 'app.items'
						});
						break;
	
						case "fn_near_by":
							scope.menu.push({
								hierarchy: 4,
								level: 0,
								hidden: false,
								icon: 'fa fa-users',
								label: 'Near by',
								state: 'app.nearby'
							});
							break;
						
					}
				}
				/*=======================================
				=            vendor           =
				=======================================*/			
				if(scope.user.access_level === 2 || scope.user.access_level === 3){
					switch(func.code){
						/* items, nearby, my bids*/
						
						case "fn_near_by":
							scope.menu.push({
								hierarchy: 3,
								level: 0,
								hidden: false,
								icon: 'fa fa-users',
								label: 'Near by',
								state: 'app.nearby'
							});
							break;
						case "fn_my_products":
							scope.menu.push({
								hierarchy: 4,
								level: 0,
								submenus: false,
								hidden: false,
								icon: 'fa fa-book',
								label: 'My Products',
								state: 'app.myproducts'
							});
							break;
						case "fn_my_bids":
							scope.menu.push({
								hierarchy: 5,
								level: 0,
								submenus: false,
								hidden: false,
								icon: 'fa fa-sitemap',
								label: 'My bids',
								state: 'app.mybids'
							});
							break;
					}
				}

				/*=============================================
				=            employee				          =
				=============================================*/
				
				if(scope.user.access_level === 3){
					switch(func.code){
						
						case "fn_categories":
							scope.menu.push({
								hierarchy: 3,
								level: 0,
								hidden: false,
								icon: 'fa fa-list',
								label: 'Categories',
								state: 'app.categories'
							});
						break;
						case "fn_requests":
							scope.menu.push({
								hierarchy: 4,
								level: 0,
								hidden: false,
								icon: 'fa fa-book',
								label: 'Requests',
								state: 'app.requests'
							});
						break;
						case "fn_users":
							scope.menu.push({
								hierarchy: 5,
								level: 0,
								hidden: false,
								submenus: true, 
								icon: 'fa fa-book',
								label: 'Users',
								state: 'app.requests',
								active: false,
							});
						break;
							case "fn_users_members":
								scope.submenu.push({
									hierarchy: 5,
									level: 1,
									hidden: false,
									icon: 'fa fa-users',
									label: 'Members',
									state: 'app.members'
								});
							break;
							case "fn_users_vendors":
								scope.submenu.push({
									hierarchy: 5,
									level: 1,
									hidden: false,
									icon: 'fa fa-users',
									label: 'Vendors',
									state: 'app.vendors'
								});
							break;


					}
				}

			});
			//console.log('menu', scope.menu);

		}

	};	
}];


angular.module('app')
	.directive('accessNav', accessNav);
var brand = ['$state','RootService','$rootScope','$mdDialog','$timeout', function($state, clubService, $rootScope, $mdDialog, $timeout){

	return {
		restrict: 'E', 
		templateUrl: 'views/page/brand.html', 
		scope:{
			brand: '=',
			user: '='
		},
		link: function(scope, element, attrs){
			
			scope.init = function(){
				scope.bShowChild = false;
				if(scope.brand.brandId){
					scope.bShowEdit = false;
				}else{
					scope.bShowEdit = true;
				}

				if(scope.brand.active === 1){
					scope.brand.active = true;
				}else{
					scope.brand.active = false;
				}

				scope.safeBrand = angular.copy(scope.brand);
			};
			scope.loadModels = function(){
				if(!scope.brand.models){
					var request = clubService.sendRequest('GET','/brand/'+scope.brand.brandId+"/models");
					request.then(function(response){
						scope.brand.models = response;
						console.log('scope.brand.models', scope.brand.models);
					}, function(error){
						clubService.addNotification('error getting '+ scope.brand.name +' models', 'error');
					});
				}
				$timeout(function () {
			        scope.$apply(function () {
			            scope.bShowChild = true;
			        });
			    }, 300);

				console.log('bShowChild', scope.bShowChild);
			};

			scope.hideModels = function(){
				scope.bShowChild = false;
			};

			scope.showEdit = function(){
				scope.bShowEdit = true;
			};

			scope.hideEdit = function(){
				scope.bShowEdit = false;
				scope.brand = angular.copy(scope.safeBrand);
			};

			scope.save = function(){
				if(!scope.brand.brandId){
					var request = clubService.sendRequest('POST', '/brand', scope.brand);
					request.then(function(response){
						scope.brand = response;

						clubService.addNotification(scope.brand.name +' saved.', 'success');
						scope.bShowEdit = false;
						scope.safeBrand = angular.copy(scope.brand);
					}, function(error){
						clubService.addNotification('error editing '+scope.brand.name, 'error');
					});
				}else{
					scope.edit();
				}
			};

			scope.edit =  function(){
				var request = clubService.sendRequest('PUT', '/brand/'+scope.brand.brandId, scope.brand);
				request.then(function(response){
					scope.brand.name = response.name;
					scope.brand.active = response.active;
					clubService.addNotification(scope.brand.name +' edited.', 'success');
					scope.bShowEdit = false;
					scope.safeBrand = angular.copy(scope.brand);
				}, function(error){
					clubService.addNotification('error editing '+scope.brand.name, 'error');
				});
			};


			scope.showConfirm = function(ev, code, type){
			   	var confirm = $mdDialog.confirm()
			          .title('Do you really want delete '+scope.brand.name+'?')
			          .textContent('Please confirm your answer.')
			          .ariaLabel('Lucky day')
			          .targetEvent(ev)
			          .ok('Yes')
			          .cancel("Cancel");

			   $mdDialog.show(confirm).then(function() {
		    		scope.deleteBrand();
		    	
			    }, function() {
			      console.log('canceled');
			    });
		    
			};

			scope.deleteBrand = function(){
				if(scope.brand.brandId){
					var request = clubService.sendRequest('DELETE', '/brand/'+scope.brand.brandId, scope.brand);
					request.then(function(response){
						scope.brand = null;
						//removebrand();
						clubService.addNotification(response.name +' deleted.', 'success');
						scope.bShowEdit = false;
					}, function(error){
						clubService.addNotification('error editing '+scope.brand.name, 'error');
					});
				}else{
					scope.brand = null;
				}
			};

			scope.addModel = function(){
				var model = {
					brandId: scope.brand.brandId,
					name: "",
					description: "",
					active: false,	
				};
				var array = [];
				angular.forEach(scope.brand.models, function(model, key){
					if(model.modelId)
						array.push(model);
				});
				array.push(model);
				scope.brand.models = array;
			};


			scope.init();




		}
	};

}];


angular.module('app')
	.directive('brand', brand);
var category = ['$state','RootService','$rootScope','$mdDialog','$timeout','adminService', function($state, clubService, $rootScope, $mdDialog, $timeout, adminService){

	return {
		restrict: 'E', 
		templateUrl: 'views/page/category.html', 
		scope:{
			category: '=',
			user: '='
		},
		link: function(scope, element, attrs){

			scope.init = function(){
				scope.bShowChild = false;
				if(scope.category.categoryId){
					scope.bShowEdit = false;
				}else{
					scope.bShowEdit = true;
				}

				if(scope.category.active === 1)
					scope.category.active = true;
				else
					scope.category.active =  false;

				//console.log('active', scope.category.active);

				scope.safeCategory = angular.copy(scope.category);


			};
			scope.loadProducts = function(){
				if(!scope.category.products){
					var request = clubService.sendRequest('GET','/category/'+scope.category.categoryId+"/products");
					request.then(function(response){
						scope.category.products = response;
						console.log('scope.category.poroducts', scope.category.products);
					}, function(error){
						clubService.addNotification('error getting '+ scope.category.name +' products', 'error');
					});
				}
				$timeout(function () {
			        scope.$apply(function () {
			            scope.bShowChild = true;
			        });
			    }, 300);

				console.log('bShowChild', scope.bShowChild);
			};

			scope.hideProducts = function(){
				scope.bShowChild = false;
			};

			scope.showEdit = function(){
				scope.bShowEdit = true;
			};

			scope.hideEdit = function(){
				scope.bShowEdit = false;
				scope.category = angular.copy(scope.safeCategory);
			};

			scope.save = function(){
				if(!scope.category.categoryId && scope.category.name && scope.category.code){
					var request = clubService.sendRequest('POST', '/categories', scope.category);
					request.then( function(response){
						scope.category = response;
						adminService.addCategory(response);
						scope.safeCategory = angular.copy(scope.category);
						clubService.addNotification(scope.category.name+ ' saved.', 'success');
						scope.bShowEdit = false;
					}, function(error){
						clubService.addNotification('error saving your new category', 'error');
					});
				}
				if(scope.category.categoryId && scope.category.name && scope.category.code){
					scope.edit();
				}
			};

			scope.edit = function(){
				var request = clubService.sendRequest('PUT', '/category/'+scope.category.categoryId, scope.category);
					request.then( function(response){
						console.log('edited', response);
						scope.category.name = response.name;
						scope.category.code = response.code;
						scope.category.active = response.active;
						scope.safeCategory = angular.copy(scope.category);	
						adminService.editCategory(response);
						clubService.addNotification(scope.category.name+ ' edited.', 'success');
						scope.bShowEdit = false;
					}, function(error){
						clubService.addNotification('error editing your  category', 'error');
					});
			};


			scope.showConfirm = function(ev, code, type){
				 // Appending dialog to document.body to cover sidenav in docs app
			   var confirm = $mdDialog.confirm()
			          .title('Do you really want delete this category ?')
			          .textContent('Please confirm your answer.')
			          .ariaLabel('Lucky day')
			          .targetEvent(ev)
			          .ok('Yes')
			          .cancel("Cancel");

			   $mdDialog.show(confirm).then(function() {
		    		scope.deleteCategory();
		    	
			    }, function() {
			      console.log('canceled');
			    });
		    
			};

			scope.deleteCategory = function(){
				if(scope.category.categoryId){
					var request= clubService.sendRequest('DELETE', '/category/'+scope.category.categoryId);
					request.then(function(response){
						adminService.removeCategory(response);
						scope.category = null;
						scope.bShowEdit = false;
						clubService.addNotification(response.name + ' deleted.', 'success');
					}, function(error){
						clubService.addNotification('error deleting this category', 'error');
					});
				}else{
					scope.category = null;
				}
			};



			scope.addProduct = function(){

				var product = {
					categoryId: scope.category.categoryId,
					name: "",
					active: false,	
				};
				var array = [];
				angular.forEach(scope.category.products, function(product, key){
					if(product.productId)
						array.push(product);
				});
				array.push(product);
				scope.category.products = array;
			};




			scope.init();




		}
	};

}];


angular.module('app')
	.directive('category', category);
var item = ['$state','RootService','MembersService','$rootScope','$mdDialog','$timeout', function($state, clubService, membersService, $rootScope, $mdDialog, $timeout){
	return {
		restrict: 'E',
		templateUrl: 'views/partials/item.html', 
		scope: { 
			item: '=',
			items: '=',
			categories: '=',
			user: '=',
		},
		controller: itemsCtrl,
		link: function(scope, controller){
			//console.log('item: ', scope.item);
			scope.country;
			scope.state;
			scope.products = [];
			scope.bOCategory  = false;
			scope.bOProduct = false;
			scope.bOBrand = false;
			scope.bOModel = false;

			scope.bContent = false;
			scope.safeItem;

			scope.init= function(){
				scope.safeItem = angular.copy(scope.item);
				if(scope.item.itemId){
					
					scope.bContent = false;
					
				}else{
					scope.bContent = true;
				}
				if(scope.item.itemId === 'clubIn')
					scope.bContent = true;
			};

			scope.addOther = function(parent, type){
				var array = [];
				angular.forEach(parent, function(element, key){
					if(type === 'category' && element.categoryId){
						array.push(element);
					}
					if(type === 'product' && element.productId){
						array.push(element);
					}
					if(type === 'brand' && element.brandId){
						array.push(element);
					}
					if(type === 'model' && element.modelId){
						array.push(element);
					}
				});
				var nuevo = {name:"Other", active: 1};
				array.push(nuevo);
				console.log('array ',type );
				return array;
			};

			scope.setCategory = function(cat){
				
				scope.category=cat;		
				console.log('scope.category!', scope.category);
				if(scope.category){
					
					if(!scope.category.categoryId){
						scope.bOCategory = true;
						scope.bOProduct = true;
						scope.bOBrand = true;
						scope.bOModel = true;
					}else{
						/// add other to the list
						scope.category.products = scope.addOther(scope.category.products, 'product');
						scope.bOCategory = false;
						scope.bOProduct = false;
						scope.bOBrand = false;
						scope.bOModel = false;
					}
					scope.item.category_name = null;
					scope.item.product_name = null;
					scope.item.brand_name = null;
					scope.item.model_name = null;
					scope.product = null;
					scope.brand = null;
					scope.model = null;
				}	

			};

			scope.setProduct = function(product){
				scope.product = product;
				console.log('product', scope.product);
				if(scope.product){
					if(!scope.product.productId){
						scope.bOProduct = true;
						scope.bOBrand = true;
						scope.bOModel = true;
					}else{
						scope.product.brands= scope.addOther(scope.product.brands, 'brand');
						scope.bOProduct = false;
						scope.bOBrand = false;
						scope.bOModel = false;
					}
					//clean item names
					scope.item.product_name = null;
					scope.item.brand_name = null;
					scope.item.model_name = null;
					scope.brand = null;
					scope.model = null;
				}


			};

			scope.setBrand = function(brand){
				scope.brand = brand;
				console.log(scope.brand);
				if(scope.brand){
					if(!scope.brand.brandId){
						scope.bOBrand = true;
						scope.bOModel = true;
					}else{
						scope.brand.models= scope.addOther(scope.brand.models, 'model');
						scope.bOBrand = false;
						scope.bOModel = false;
					}
					scope.item.brand_name = null;
					scope.item.model_name = null;
					scope.model = null;
				}
			};

			scope.setModel = function(model){
				scope.model = model;
				console.log('modelo', scope.model);
				if(scope.model){
					if(scope.model.modelId){
						scope.bOModel = false;
					}else{
						scope.bOModel = true;
					}
					scope.item.model_name = null;
				}
			};

			scope.setCountry = function(country){
				scope.country = country;
			};
			scope.setState = function(state){
				scope.state = state;
			};
			scope.setCity = function(city){
				scope.city = city;
			};

			scope.edit = function (){
				if(scope.item.otherLocation && scope.country && scope.state && scope.city){
					scope.location  = {
						itemLocationId: scope.item.location[1].itemLocationId,
						country: scope.country,
						state: scope.state,
						city: scope.city
					};
					scope.item.modifyLocation = scope.location;
				}
				var request = clubService.sendRequest('PUT', '/item/'+scope.item.itemId, scope.item);
				request.then(function(response){

					scope.item = response;
					console.log('edited!', response);
					clubService.addNotification('item saved correctly', 'success');
					scope.bContent = false;
				}, function(error){
					clubService.addNotification('error');
				});
			};

			scope.save = function(){
				
				var bSave = false;
				//console.log(allFieldsCompleted() , scope.category , scope.category.categoryId , scope.product , scope.product.productId , scope.brand , scope.brand.brandId , scope.model , scope.model.modelId);
				if(allFieldsCompleted() && scope.category && scope.category.categoryId && scope.product && scope.product.productId && scope.brand && scope.brand.brandId && scope.model && scope.model.modelId)
				{
					scope.item.categoryId = scope.category.categoryId;
					scope.item.productId = scope.product.productId;
					scope.item.brandId = scope.brand.brandId;
					scope.item.modelId = scope.model.modelId;
					scope.item.category_name = scope.category.name;
					scope.item.product_name = scope.product.name;
					scope.item.brand_name = scope.brand.name;
					scope.item.model_name = scope.model.name;
					console.log('item ready to be saved', scope.item);
					scope.item.active = true;
					bSave = true;
				}else if( allFieldsCompleted() && scope.item.itemId === 'clubIn'){
					bSave = true;
				}
				else if(allFieldsCompleted() && (scope.bOCategory || scope.bOProduct || scope.bOBrand || scope.bOModel) ){
					if(scope.category){
						if(scope.category.categoryId)
							scope.item.categoryId = scope.category.categoryId;
						if(scope.category.name)
							scope.item.category_name = scope.category.name;
					}
					if(scope.product){
						if(scope.product.productId)
							scope.item.productId = scope.product.productId;
						if(scope.product.name)
							scope.item.product_name = scope.product.name;
					}
					if(scope.brand){
						if(scope.brand.brandId)
							scope.item.brandId = scope.brand.brandId;
						if(scope.brand.name)
							scope.item.brand_name = scope.brand.name;
					}
					if(scope.model){
						if(scope.model.modelId)
							scope.item.modelId = scope.model.modelId;
						if(scope.model.name)
							scope.item.model_name = scope.model.name;
					}

					scope.item.active = false;
					console.log('item request!', scope.item);
					bSave = true;
				}			

				if(scope.item.otherLocation && scope.country && scope.state && scope.city){
					console.log('added other location');
					scope.location  = {
						country: scope.country,
						state: scope.state,
						city: scope.city
					};
					scope.item.location = scope.location;
				}
				if(bSave){
					if(scope.isItemRepeated(scope.item)){

					}else{

						scope.item.memberId = $rootScope.currentUser.memberId;
						scope.bContent = false;
						var request = clubService.sendRequest('POST', '/item', scope.item);
						request.then(function(response){
							
							scope.item.itemId= response.itemId;
							scope.item.location = response.location;
							scope.safeItem.itemId = response.itemId;
							scope.safeItem.location = response.location;
							clubService.addNotification('added item successfully', 'success');
							scope.bContent = false;
						}, function(error){
							clubService.addNotification('error adding item', 'error');
						});
					}
				}else{
					clubService.addNotification('Please fill all the fields');
				}
				
				
			};

			scope.isItemRepeated = function(item){
				var booleano = true;
				scope.allItems = membersService.getItems();
				console.log('all items', scope.allItems);

				return booleano;
			};


			scope.cancel = function (){
				scope.bContent = false;
				scope.item = angular.copy(scope.safeItem);

				console.log('item cancel', scope.item);
			};

			scope.showContent = function(){
				scope.bContent = true;
				console.log('bContent', scope.bContent);
			};

			function allFieldsCompleted(){
				var booleano = false;
				if(scope.item.price > 0 && scope.item.quantity > 0 ){
					booleano = true;
				}
				return booleano;
			}

			scope.otherLocation = function(){
				scope.item.otherLocation != scope.item.otherlocation;
				//console.log('scope.item.otherLocation', scope.item.otherLocation);
			};

			scope.showConfirm = function(ev, code, type){
				 // Appending dialog to document.body to cover sidenav in docs app
			   var confirm = $mdDialog.confirm()
			          .title('Do you really want delete this item ?')
			          .textContent('Please confirm your answer.')
			          .ariaLabel('Lucky day')
			          .targetEvent(ev)
			          .ok('Yes!')
			          .cancel("Cancel");

			   $mdDialog.show(confirm).then(function() {
		    		scope.deleteItem();
		    	
			    }, function() {
			      console.log('canceled');
			    });
		    
			};
			scope.deleteItem = function(){
				var request = clubService.sendRequest('DELETE', '/item/'+scope.item.itemId);
				request.then(function(response){
					membersService.removeItem(response);
					scope.item = null;
					scope.bContent = false;
				}, function(error){
					clubService.addNotification('error deleting the item', 'error');
				});
			};

			
			scope.init();
		}

	};
	
}];


angular.module('app')
	.directive('item', item);
var model = ['$state','RootService','$rootScope','$mdDialog', function($state, clubService, $rootScope, $mdDialog){

	return {
		restrict: 'E', 
		templateUrl: 'views/page/model.html', 
		scope:{
			model: '=',
			user: '='
		},
		link: function(scope, element, attrs){
			
			scope.init = function(){
				scope.bShowChild = false;
				if(scope.model.modelId){
					scope.bShowEdit = false;
				}else{
					scope.bShowEdit = true;
				}

				if(scope.model.active === 1){
					scope.model.active = true;
				}else{
					scope.model.active = false;
				}

				scope.safeModel = angular.copy(scope.model);
			};
			
			scope.showEdit = function(){
				scope.bShowEdit = true;
			};

			scope.hideEdit = function(){
				scope.bShowEdit = false;
				scope.model = angular.copy(scope.safeModel);
			};

			scope.save = function(){
				if(!scope.model.modelId){
					var request = clubService.sendRequest('POST', '/model', scope.model);
					request.then(function(response){
						scope.model = response;

						clubService.addNotification(scope.model.name +' saved.', 'success');
						scope.bShowEdit = false;
						scope.safeModel = angular.copy(scope.model);
					}, function(error){
						clubService.addNotification('error editing '+scope.model.name, 'error');
					});
				}else{
					scope.edit();
				}
			};

			scope.edit =  function(){
				var request = clubService.sendRequest('PUT', '/model/'+scope.model.modelId, scope.model);
				request.then(function(response){
					scope.model.name = response.name;
					scope.model.active = response.active;
					clubService.addNotification(scope.model.name +' edited.', 'success');
					scope.bShowEdit = false;
					scope.safeModel = angular.copy(scope.model);
				}, function(error){
					clubService.addNotification('error editing '+scope.model.name, 'error');
				});
			};

			scope.showConfirm = function(ev, code, type){
			   	var confirm = $mdDialog.confirm()
			          .title('Do you really want delete '+scope.model.name+'?')
			          .textContent('Please confirm your answer.')
			          .ariaLabel('Lucky day')
			          .targetEvent(ev)
			          .ok('Yes')
			          .cancel("Cancel");

			   $mdDialog.show(confirm).then(function() {
		    		scope.deleteModel();
		    	
			    }, function() {
			      console.log('canceled');
			    });
		    
			};

			scope.deleteModel = function(){
				if(scope.model.modelId){
					var request = clubService.sendRequest('DELETE', '/model/'+scope.model.modelId, scope.model);
					request.then(function(response){
						scope.model = null;
						//removemodel();
						clubService.addNotification(response.name +' deleted.', 'success');
						scope.bShowEdit = false;
					}, function(error){
						clubService.addNotification('error editing '+scope.model.name, 'error');
					});
				}else{
					scope.model = null;
				}
			};

			scope.init();




		}
	};

}];


angular.module('app')
	.directive('model', model);
var product = ['$state','RootService','$rootScope','$mdDialog','$timeout', function($state, clubService, $rootScope, $mdDialog, $timeout){

	return {
		restrict: 'E', 
		templateUrl: 'views/page/product.html', 
		scope:{
			product: '=',
			user: '='
		},
		link: function(scope, element, attrs){
			//console.log('hello product!', scope.product);
			scope.init = function(){
				scope.bShowChild = false;
				if(scope.product.productId){
					scope.bShowEdit = false;
				}else{
					scope.bShowEdit = true;
				}

				if(scope.product.active === 1){
					scope.product.active = true;
				}else{
					scope.product.active = false;
				}

				scope.safeProduct = angular.copy(scope.product);
			};
			scope.loadBrands = function(){
				if(!scope.product.brands){
					var request = clubService.sendRequest('GET','/product/'+scope.product.productId+"/brands");
					request.then(function(response){
						scope.product.brands = response;
						console.log('scope.product.brands', scope.product.brands);
					}, function(error){
						clubService.addNotification('error getting '+ scope.product.name +' brands', 'error');
					});
				}

				$timeout(function () {
			        scope.$apply(function () {
			            scope.bShowChild = true;
			        });
			    }, 300);

				console.log('bShowChild', scope.bShowChild);
			};

			scope.hideBrands = function(){
				scope.bShowChild = false;
			};

			scope.showEdit = function(){
				scope.bShowEdit = true;
			};

			scope.hideEdit = function(){
				scope.bShowEdit = false;
				scope.product = angular.copy(scope.safeProduct);
			};


			scope.save = function(){
				if(!scope.product.productId){
					var request = clubService.sendRequest('POST', '/product', scope.product);
					request.then(function(response){
						scope.product = response;

						clubService.addNotification(scope.product.name +' saved.', 'success');
						scope.bShowEdit = false;
						scope.safeProduct = angular.copy(scope.product);
					}, function(error){
						clubService.addNotification('error editing '+scope.product.name, 'error');
					});
				}else{
					scope.edit();
				}
			};

			scope.edit =  function(){
				var request = clubService.sendRequest('PUT', '/product/'+scope.product.productId, scope.product);
				request.then(function(response){
					scope.product.name = response.name;
					scope.product.active = response.active;
					clubService.addNotification(scope.product.name +' edited.', 'success');
					scope.bShowEdit = false;
					scope.safeProduct = angular.copy(scope.product);
				}, function(error){
					clubService.addNotification('error editing '+scope.product.name, 'error');
				});
			};


			scope.showConfirm = function(ev, code, type){
			   	var confirm = $mdDialog.confirm()
			          .title('Do you really want delete '+scope.product.name+'?')
			          .textContent('Please confirm your answer.')
			          .ariaLabel('Lucky day')
			          .targetEvent(ev)
			          .ok('Yes')
			          .cancel("Cancel");

			   $mdDialog.show(confirm).then(function() {
		    		scope.deleteProduct();
		    	
			    }, function() {
			      console.log('canceled');
			    });
		    
			};

			scope.deleteProduct = function(){
				if(scope.product.productId){
					var request = clubService.sendRequest('DELETE', '/product/'+scope.product.productId, scope.product);
					request.then(function(response){
						scope.product = null;
						//removeProduct();
						clubService.addNotification(response.name +' deleted.', 'success');
						scope.bShowEdit = false;
					}, function(error){
						clubService.addNotification('error editing '+scope.product.name, 'error');
					});
				}else{
					scope.product = null;
				}
			};


			scope.addBrand = function(){
				var brand = {
					productId: scope.product.productId,
					name: "",
					active: false,	
				};
				var array = [];
				angular.forEach(scope.product.brands, function(brand, key){
					if(brand.brandId)
						array.push(brand);
				});
				array.push(brand);
				scope.product.brands = array;
			};

			scope.init();




		}
	};

}];


angular.module('app')
	.directive('product', product);
(function() {
  'use strict';
  angular
    .module('app')
    .directive('uiFullscreen', uiFullscreen);

    uiFullscreen.$inject = ['$ocLazyLoad', '$document'];
    function uiFullscreen($ocLazyLoad, $document) {
      var directive = {
          restrict: 'AC',
          link: link
      };
      return directive;
      
      function link(scope, el, attr) {
          el.addClass('hide');
          $ocLazyLoad.load('../libs/jquery/screenfull/dist/screenfull.min.js').then(function(){
            if (screenfull.enabled) {
              el.removeClass('hide');
            } else{
              return;
            }
            el.bind('click', function(){
              var target;
              attr.target && ( target = angular.element(attr.target)[0] );
              screenfull.toggle(target);
            });

            var body = angular.element($document[0].body);
            $document.on(screenfull.raw.fullscreenchange, function () {
              if(screenfull.isFullscreen){
                body.addClass('fullscreen');
              }else{
                body.removeClass('fullscreen');
              }
            });
          });
      }
    }
})();

(function() {
    'use strict';
    angular
        .module('app')
        .directive("uiInclude", uiInclude);
        uiInclude.$inject = ['$http', '$templateCache', '$compile'];
        function uiInclude($http, $templateCache, $compile) {
            var directive = {
                restrict: 'A',
                link: link
            };
            return directive;
            function link(scope, el, attr) {
                var templateUrl = scope.$eval(attr.uiInclude);
                $http.get(templateUrl, {cache: $templateCache}).success(
                    function (tplContent) {
                        el.replaceWith($compile(tplContent)(scope));
                    }
                );
            }
        }
})();

(function() {
  'use strict';
  angular
    .module('ui.jp', ['ui.load'])
    .value('uiJpConfig', {})
    .directive('uiJp', uiJp);

    uiJp.$inject = ['uiJpConfig', 'MODULE_CONFIG', 'uiLoad', '$timeout'];

    function uiJp(uiJpConfig, MODULE_CONFIG, uiLoad, $timeout) {
      var directive = {
        restrict: 'A',
        compile: compile
      };
      return directive;

      function compile(tElm, tAttrs) {
        var options = uiJpConfig && uiJpConfig[tAttrs.uiJp];
        var link = link;
        return link;
        function link(scope, elm, attrs) {

          function getOptions(){
            var linkOptions = [];

            // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method
            if (attrs.uiOptions) {
              linkOptions = eval('[' + attrs.uiOptions + ']');
              if (angular.isObject(options) && angular.isObject(linkOptions[0])) {
                linkOptions[0] = angular.extend({}, options, linkOptions[0]);
              }
            } else if (options) {
              linkOptions = [options];
            }
            return linkOptions;
          }

          // If change compatibility is enabled, the form input's "change" event will trigger an "input" event
          if (attrs.ngModel && elm.is('select,input,textarea')) {
            elm.bind('change', function() {
              elm.trigger('input');
            });
          }

          // Call jQuery method and pass relevant options
          function callPlugin() {
            $timeout(function() {
              //$(elm)[attrs.uiJp].apply($(elm), getOptions());
            }, 0, false);
          }

          function refresh(){
            // If ui-refresh is used, re-fire the the method upon every change
            if (attrs.uiRefresh) {
              scope.$watch(attrs.uiRefresh, function(newValue, oldValue) {
                if(newValue == oldValue) return;
                callPlugin();
              });
            }
          }

          var jp = false;
          angular.forEach(MODULE_CONFIG, function(module) {
            if( module.name == attrs.uiJp){
              jp = module.files;
            }
          });

          if ( jp ) {
            uiLoad.load(jp).then(function() {
              callPlugin();
              refresh();
            }).catch(function() {
              
            });
          } else {
            callPlugin();
            refresh();
          }
        };
      }
    }

})();


  angular
    .module('app')
    .directive('uiNav', uiNav);
    function uiNav() {
      var directive = {
        restrict: 'AC',
        link: link
      };
      return directive;
    }
    function link(scope, el, attr) {
      el.find('a').bind('click', function(e) {
        var li = angular.element(this).parent();
        var active = li.parent()[0].querySelectorAll('.active');
        li.toggleClass('active');
        angular.element(active).removeClass('active');
      });
    }


(function() {
  'use strict';
  angular
    .module('app')
    .directive('uiScrollTo', uiScrollTo);

    uiScrollTo.$inject = ['$location', '$anchorScroll'];
    function uiScrollTo($location, $anchorScroll) {
      return {
        restrict: 'AC',
        replace: true,
        link: link
      };
      function link(scope, el, attr) {
        el.bind('click', function(e) {
          e.preventDefault();
          $location.hash(attr.uiScrollTo);
          $anchorScroll();
        });
      }
    }
})();

(function() {
  'use strict';
  angular
    .module('app')
    .directive('uiToggleClass', uiToggleClass);

    uiToggleClass.$inject = ['$timeout', '$document'];
    function uiToggleClass($timeout, $document) {
      return {
        restrict: 'AC',
        link: link
      };

      function link(scope, el, attr) {
        el.on('click', function(e) {
          e.preventDefault();
          var classes = attr.uiToggleClass.split(','),
              targets = (attr.uiTarget && attr.uiTarget.split(',')) || (attr.target && attr.target.split(',')) || Array(el),
              key = 0;
              
          angular.forEach(classes, function( _class ) {
            var target = $( targets[(targets.length && key)] ),
                current = $( target ).attr('ui-class');

            (current != _class) && target.removeClass( $( target ).attr('ui-class') );
            target.toggleClass(_class);
            $( target ).attr('ui-class', _class);

            key ++;
          });
          el.toggleClass('active');

        });
      }
    }
})();

var userRequest = ['$state','RootService','$rootScope','$mdDialog','$timeout','adminService', function($state, clubService, $rootScope, $mdDialog, $timeout, adminService){
	return{

		restrict: 'E', 
		templateUrl: 'views/page/request.html', 
		scope:{
			request: '=',
			user: '='
		},
		link: function(scope, element, attrs){


		}


	};

}];

angular.module('app')
	.directive('userRequest', userRequest);
var vendorProduct = ['$state','RootService','vendorService', '$mdDialog', '$timeout', function($state, clubService, vendorService, $mdDialog, $timeout){
	return{
		restrict: 'E',
		templateUrl: 'views/partials/vendor-product.html',
		scope: {
			vproduct: '=',
			user: '=', 
			categories: '='
		},
		link: function(scope, element, attrs){
			console.log('user', scope.user);
			scope.bOCategory  = false;
			scope.bOProduct = false;
			scope.bOBrand = false;
			scope.bOModel = false;

			scope.bContent = false;

			scope.init = function(){
				if(scope.vproduct.productId){
					scope.bContent = false;
				}else{
					scope.bContent = true;
				}
				scope.safeProduct = angular.copy(scope.vproduct);
			};


			scope.addOther = function(parent, type){
				var array = [];
				angular.forEach(parent, function(element, key){
					if(type === 'category' && element.categoryId){
						array.push(element);
					}
					if(type === 'product' && element.productId){
						array.push(element);
					}
					if(type === 'brand' && element.brandId){
						array.push(element);
					}
					if(type === 'model' && element.modelId){
						array.push(element);
					}
				});
				var nuevo = {name:"Other", active: 1};
				array.push(nuevo);
				console.log('array ',type );
				return array;
			};


			scope.setCategory = function(cat){
				scope.category=cat;		
				console.log('scope.category!', scope.category);
				if(scope.category){	
					if(!scope.category.categoryId){
						scope.bOCategory = true;
						scope.bOProduct = true;
						scope.bOBrand = true;
						scope.bOModel = true;
					}else{
						/// add other to the list
						scope.category.products = scope.addOther(scope.category.products, 'product');
						scope.bOCategory = false;
						scope.bOProduct = false;
						scope.bOBrand = false;
						scope.bOModel = false;
					}
					scope.vproduct.category_name = null;
					scope.vproduct.product_name = null;
					scope.vproduct.brand_name = null;
					scope.vproduct.model_name = null;
					scope.product = null;
					scope.brand = null;
					scope.model = null;
				}	
			};

			scope.setProduct = function(product){
				scope.product = product;
				console.log('product', scope.product);
				if(scope.product){
					if(!scope.product.productId){
						scope.bOProduct = true;
						scope.bOBrand = true;
						scope.bOModel = true;
					}else{
						scope.product.brands= scope.addOther(scope.product.brands, 'brand');
						scope.bOProduct = false;
						scope.bOBrand = false;
						scope.bOModel = false;
					}
					//clean product names
					scope.vproduct.product_name = null;
					scope.vproduct.brand_name = null;
					scope.vproduct.model_name = null;
					scope.brand = null;
					scope.model = null;
				}
			};


			scope.setBrand = function(brand){
				scope.brand = brand;
				console.log(scope.brand);
				if(scope.brand){
					if(!scope.brand.brandId){
						scope.bOBrand = true;
						scope.bOModel = true;
					}else{
						scope.brand.models= scope.addOther(scope.brand.models, 'model');
						scope.bOBrand = false;
						scope.bOModel = false;
					}
					scope.vproduct.brand_name = null;
					scope.vproduct.model_name = null;
					scope.model = null;
				}
			};

			scope.setModel = function(model){
				scope.model = model;
				console.log('modelo', scope.model);
				if(scope.model){
					if(scope.model.modelId){
						scope.bOModel = false;
					}else{
						scope.bOModel = true;
					}
					scope.vproduct.model_name = null;
				}
			};


			scope.save = function(){
				var bSave = false;
				// console.log('category', scope.category, 'product', scope.product, 'brand', scope.brand, 'mdoel', scope.model);
				if(scope.category && scope.product && scope.brand && scope.model){
					// item without
					scope.vproduct.categoryId = scope.category.categoryId;
					scope.vproduct.productId = scope.product.productId;
					scope.vproduct.brandId = scope.brand.brandId;
					scope.vproduct.modelId = scope.model.modelId;
					scope.vproduct.category_name = scope.category.name;
					scope.vproduct.product_name = scope.product.name;
					scope.vproduct.brand_name = scope.brand.name;
					scope.vproduct.model_name = scope.model.name;
					scope.vproduct.active = true;
					bSave = true;	
				}
				else if((scope.bOCategory || scope.bOProduct || scope.bOBrand || scope.bOModel)){
					if(scope.category){
						if(scope.category.categoryId)
							scope.vproduct.categoryId = scope.category.categoryId;
						if(scope.category.name)
							scope.vproduct.category_name = scope.category.name;
					}
					if(scope.product){
						if(scope.product.productId)
							scope.vproduct.productId = scope.product.productId;
						if(scope.product.name)
							scope.vproduct.product_name = scope.product.name;
					}
					if(scope.brand){
						if(scope.brand.brandId)
							scope.vproduct.brandId = scope.brand.brandId;
						if(scope.brand.name)
							scope.vproduct.brand_name = scope.brand.name;
					}
					if(scope.model){
						if(scope.model.modelId)
							scope.vproduct.modelId = scope.model.modelId;
						if(scope.model.name)
							scope.vproduct.model_name = scope.model.name;
					}

					scope.vproduct.active = false;
					if(scope.vproduct.category_name && scope.vproduct.product_name && scope.vproduct.brand_name && scope.vproduct.model_name){
						bSave = true;
					}
				}
				if(bSave){
					if(scope.isRepeatedProduct(scope.vproduct)){
						clubService.addNotification('sorry, you already have this product in your list', 'error');
					}else{
						scope.vproduct.vendorId = scope.user.vendorId;
						var request = clubService.sendRequest('POST', '/vendor/product', scope.vproduct);
						request.then(function(response){

							scope.vproduct.vendorProductId = response.vendorProductId;
							//scope.safeProduct = scope.vproduct;
							scope.bContent = false;
							clubService.addNotification('product saved' , 'success');

						}, function(error){
							clubService.addNotification('error saving your product', 'error');
						});
					}
				}else{
					clubService.addNotification('please fill all the fields');
				}
			};

			scope.isRepeatedProduct = function(product){
				var booleano = false;
				scope.allProducts = vendorService.getProducts();
				console.log('all products', scope.allProducts);
				angular.forEach(scope.allProducts, function(pro, key){
					if(pro.vendorProductId && pro.model_name === product.model_name){
						console.log('match! pro', pro.model_name, 'product ', product.model_name);
						booleano = true;
					}
				});
				return booleano;
			};

			scope.cancel = function (){
				scope.bContent = false;
				scope.vproduct = angular.copy(scope.safeProduct);

				console.log('product cancel', scope.vproduct);
			};


			scope.showConfirm = function(ev, code, type){
				 // Appending dialog to document.body to cover sidenav in docs app
			   var confirm = $mdDialog.confirm()
			          .title('Do you really want delete this product ?')
			          .textContent('Please confirm your answer.')
			          .ariaLabel('Lucky day')
			          .targetEvent(ev)
			          .ok('Yes!')
			          .cancel("Cancel");

			   $mdDialog.show(confirm).then(function() {
		    		scope.deleteProduct();
		    	
			    }, function() {
			      console.log('canceled');
			    });
		    
			};

			scope.deleteProduct = function(){
				if(scope.vproduct.vendorProductId){
					var request = clubService.sendRequest('DELETE', '/vendor/product/'+scope.vproduct.vendorProductId);
					request.then(function(response){
						vendorService.removeProduct(response);
						scope.vproduct = null;
						scope.bContent = false;

					}, function(error){
						clubService.addNotification('error deleting the product', 'error');
					});
				}else{
					scope.vproduct = null;
					scope.bContent = false;
				}
			};



			scope.init();


		}


	};



}];


angular.module('app')
	.directive('vendorProduct', vendorProduct);
(function() {
    'use strict';
    angular
		.module('app')
		.filter('fromNow', fromNow);

		function fromNow() {
		    return function(date) {
		      return moment(date).fromNow();
		    }
		}
})();

var adminService = ['$http', '$q', 'RootService',  function ($http, $q, clubService){
	this.categories = null;

	this.getCategories = function(){
		return this.categories;
	};

	this.setCategories = function(categories){
		this.categories = categories;
	};

	this.addCategory = function(category){
		var array = [];
		angular.forEach(this.categories, function(cat, key){
			if(cat.categoryId)
				array.push(cat);
		});
		array.push(category);
		this.setCategories(array);
	};

	this.editCategory = function(category){
		angular.forEach(this.categories, function(cat, key){
			if(cat.categoryId === category.categoryId){
				cat.name = category.name;
				cat.code = category.code;
			}
		});
	};

	this.removeCategory = function(category){
		var array = [];
		angular.forEach(this.categories, function(cat, key){
			if(cat.categoryId != category.categoryId || !cat.categoryId){
				array.push(cat);
			}
		});
		this.setCategories(array);
	};

}];



angular.module('app')
	.service('adminService', adminService);
var MembersService = ['$http', '$q', 'RootService',  function ($http, $q, clubService){

	this.items = null;
	this.categories = null;
	this.clubModelo = null;

	this.getItems = function (){
		return this.items;
	};

	this.setItems = function (items){
		this.items = items;
	};

	this.addItems = function(nuevo){
		var array = [];
		angular.forEach(this.items, function(item, key){
			if(item.itemId)
				array.push(item);
		});
		console.log('array with ids', array);
		array.push(nuevo);
		this.setItems(array);
	}

	this.removeItem = function(deletingItem){
		var array = [];
		angular.forEach(this.items, function(item, key){
			if(item.itemId != deletingItem.itemId || !item.itemId){
				array.push(item);
			}
		});
		this.setItems(array);
	};


	this.getCategories = function (){
		return this.categories;
	};

	this.setCategories = function(categories){
		this.categories = categories;
	};

	this.setClub = function(club){
		this.club = club;
	};

	this.getClub = function(club){
		return this.club;
	};

	this.getClubModelo = function(){
		return this.clubModelo;
	};

	this.setClubModelo = function(modelo){
		this.clubModelo = modelo;
	};

}];


angular.module('app')
	.service('MembersService', MembersService);
/**
 * 0.0.2
 * local storage
 * 
 * @ flatfull.com All Rights Reserved.
 * Author url: http://themeforest.net/user/flatfull
 */
    angular.module('ngStore', [])
    .provider('ngStore', ngStoreProvider)
    .factory('ngStoreFactory', ngStoreFactory);
    
    function ngStoreProvider(){
      return {
        $get: ['ngStoreFactory', function(ngStoreFactory) {
          return {
            model: function(name) {
              var model = new ngStoreFactory(name);
              return model;
            }
          };
        }]
      };
    }

    function ngStoreFactory(){

      function Store(name, serializer) {
        if( !this.localStorage ) {
          throw "localStorage: Environment does not support localStorage."
        }
        this.name = name;
        this.serializer = serializer || {
          serialize: function(item) {
            return isObject(item) ? JSON.stringify(item) : item;
          },
          // fix for "illegal access" error on Android when JSON.parse is passed null
          deserialize: function (data) {
            return data && JSON.parse(data);
          }
        };
        var store = this.localStorage().getItem(this.name);
        this.records = (store && store.split(",")) || [];
      };

      Store.prototype = {

        // Save the current state of the **Store** to *localStorage*.
        save: function() {
          this.localStorage().setItem(this.name, this.records.join(","));
        },

        // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already
        // have an id of it's own.
        create: function(model) {
          if (!model.id && model.id !== 0) {
            model.id = guid();
            model.set(model.idAttribute, model.id);
          }
          this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));
          this.records.push(model.id.toString());
          this.save();
          return this.find(model);
        },

        // Update a model by replacing its copy in `this.data`.
        update: function(model) {
          this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));
          var modelId = model.id.toString();
          if (!contains(this.records, modelId)) {
            this.records.push(modelId);
            this.save();
          }
          return this.find(model);
        },

        // Retrieve a model from `this.data` by id.
        find: function(model) {
          return this.serializer.deserialize(this.localStorage().getItem(this._itemName(model.id)));
        },

        // Return the array of all models currently in storage.
        findAll: function() {
          var result = [];
          for (var i = 0, id, data; i < this.records.length; i++) {
            id = this.records[i];
            data = this.serializer.deserialize(this.localStorage().getItem(this._itemName(id)));
            if (data != null) result.push(data);
          }
          return result;
        },

        // Delete a model from `this.data`, returning it.
        destroy: function(model) {
          this.localStorage().removeItem(this._itemName(model.id));
          var modelId = model.id.toString();
          for (var i = 0, id; i < this.records.length; i++) {
            if (this.records[i] === modelId) {
              this.records.splice(i, 1);
            }
          }
          this.save();
          return model;
        },

        nextId: function(){
          return this.records.length == 0 ? 1 : Number(this.records[this.records.length - 1]) + 1;
        },

        localStorage: function() {
          return localStorage;
        },

        // Clear localStorage for specific collection.
        _clear: function() {
          var local = this.localStorage(),
            itemRe = new RegExp("^" + this.name + "-");

          // Remove id-tracking item (e.g., "foo").
          local.removeItem(this.name);

          // Match all data items (e.g., "foo-ID") and remove.
          for (var k in local) {
            if (itemRe.test(k)) {
              local.removeItem(k);
            }
          }

          this.records.length = 0;
        },

        // Size of localStorage.
        _storageSize: function() {
          return this.localStorage().length;
        },

        _itemName: function(id) {
          return this.name+"-"+id;
        }

      };

      return Store;

      // Generate four random hex digits.
      function S4() {
         return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
      };

      // Generate a pseudo-GUID by concatenating random hexadecimal.
      function guid() {
         return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
      };

      function isObject(item) {
        return item === Object(item);
      }

      function contains(array, item) {
        var i = array.length;
        while (i--) if (array[i] === item) return true;
        return false;
      }
    }


/**
 * google-material-color v1.2.6
 * https://github.com/danlevan/google-material-color
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.palette = factory();
  }
})(this, function() {
  // avoid using lodash in dependencies
  function keys(obj) {
    var keys, key;
    
    keys = [];
    
    for (var key in obj) if (obj.hasOwnProperty(key)) {
      keys.push(key);
    }
    
    return keys;
  }
  
  // avoid using lodash in dependencies
  function random(min, max) {
    return Math.floor(Math.random() * ( max - min + 1 )) + min;
  }


  return {
    palette: { 
      'red': { 
        '50': '#FFEBEE', 
        '100': '#FFCDD2', 
        '200': '#EF9A9A', 
        '300': '#E57373', 
        '400': '#EF5350', 
        '500': '#F44336', 
        '600': '#E53935', 
        '700': '#D32F2F', 
        '800': '#C62828', 
        '900': '#B71C1C', 
        'A100': '#FF8A80', 
        'A200': '#FF5252', 
        'A400': '#FF1744', 
        'A700': '#D50000', 
      },

      'pink': { 
        '50': '#FCE4EC', 
        '100': '#F8BBD0', 
        '200': '#F48FB1', 
        '300': '#F06292', 
        '400': '#EC407A', 
        '500': '#E91E63', 
        '600': '#D81B60', 
        '700': '#C2185B', 
        '800': '#AD1457', 
        '900': '#880E4F', 
        'A100': '#FF80AB', 
        'A200': '#FF4081', 
        'A400': '#F50057', 
        'A700': '#C51162', 
      },

      'purple': { 
        '50': '#F3E5F5', 
        '100': '#E1BEE7', 
        '200': '#CE93D8', 
        '300': '#BA68C8', 
        '400': '#AB47BC', 
        '500': '#9C27B0', 
        '600': '#8E24AA', 
        '700': '#7B1FA2', 
        '800': '#6A1B9A', 
        '900': '#4A148C', 
        'A100': '#EA80FC', 
        'A200': '#E040FB', 
        'A400': '#D500F9', 
        'A700': '#AA00FF', 
      },

      'deep-purple': { 
        '50': '#EDE7F6', 
        '100': '#D1C4E9', 
        '200': '#B39DDB', 
        '300': '#9575CD', 
        '400': '#7E57C2', 
        '500': '#673AB7', 
        '600': '#5E35B1', 
        '700': '#512DA8', 
        '800': '#4527A0', 
        '900': '#311B92', 
        'A100': '#B388FF', 
        'A200': '#7C4DFF', 
        'A400': '#651FFF', 
        'A700': '#6200EA', 
      },

      'indigo': { 
        '50': '#E8EAF6', 
        '100': '#C5CAE9', 
        '200': '#9FA8DA', 
        '300': '#7986CB', 
        '400': '#5C6BC0', 
        '500': '#3F51B5', 
        '600': '#3949AB', 
        '700': '#303F9F', 
        '800': '#283593', 
        '900': '#1A237E', 
        'A100': '#8C9EFF', 
        'A200': '#536DFE', 
        'A400': '#3D5AFE', 
        'A700': '#304FFE', 
      },

      'blue': {
        '50': '#E3F2FD', 
        '100': '#BBDEFB', 
        '200': '#90CAF9', 
        '300': '#64B5F6', 
        '400': '#42A5F5', 
        '500': '#2196F3', 
        '600': '#1E88E5', 
        '700': '#1976D2', 
        '800': '#1565C0', 
        '900': '#0D47A1', 
        'A100': '#82B1FF', 
        'A200': '#448AFF', 
        'A400': '#2979FF', 
        'A700': '#2962FF', 
      },

      'light-blue': { 
        '50': '#E1F5FE', 
        '100': '#B3E5FC', 
        '200': '#81D4FA', 
        '300': '#4FC3F7', 
        '400': '#29B6F6', 
        '500': '#03A9F4', 
        '600': '#039BE5', 
        '700': '#0288D1', 
        '800': '#0277BD', 
        '900': '#01579B', 
        'A100': '#80D8FF', 
        'A200': '#40C4FF', 
        'A400': '#00B0FF', 
        'A700': '#0091EA', 
      },

      'cyan': { 
        '50': '#E0F7FA', 
        '100': '#B2EBF2', 
        '200': '#80DEEA', 
        '300': '#4DD0E1', 
        '400': '#26C6DA', 
        '500': '#00BCD4', 
        '600': '#00ACC1', 
        '700': '#0097A7', 
        '800': '#00838F', 
        '900': '#006064', 
        'A100': '#84FFFF', 
        'A200': '#18FFFF', 
        'A400': '#00E5FF', 
        'A700': '#00B8D4', 
      },

      'teal': { 
        '50': '#E0F2F1', 
        '100': '#B2DFDB', 
        '200': '#80CBC4', 
        '300': '#4DB6AC', 
        '400': '#26A69A', 
        '500': '#009688', 
        '600': '#00897B', 
        '700': '#00796B', 
        '800': '#00695C', 
        '900': '#004D40', 
        'A100': '#A7FFEB', 
        'A200': '#64FFDA', 
        'A400': '#1DE9B6', 
        'A700': '#00BFA5', 
      },

      'green': { 
        '50': '#E8F5E9', 
        '100': '#C8E6C9', 
        '200': '#A5D6A7', 
        '300': '#81C784', 
        '400': '#66BB6A', 
        '500': '#4CAF50', 
        '600': '#43A047', 
        '700': '#388E3C', 
        '800': '#2E7D32', 
        '900': '#1B5E20', 
        'A100': '#B9F6CA', 
        'A200': '#69F0AE', 
        'A400': '#00E676', 
        'A700': '#00C853', 
      },

      'light-green': { 
        '50': '#F1F8E9', 
        '100': '#DCEDC8', 
        '200': '#C5E1A5', 
        '300': '#AED581', 
        '400': '#9CCC65', 
        '500': '#8BC34A', 
        '600': '#7CB342', 
        '700': '#689F38', 
        '800': '#558B2F', 
        '900': '#33691E', 
        'A100': '#CCFF90', 
        'A200': '#B2FF59', 
        'A400': '#76FF03', 
        'A700': '#64DD17', 
      },

      'lime': { 
        '50': '#F9FBE7', 
        '100': '#F0F4C3', 
        '200': '#E6EE9C', 
        '300': '#DCE775', 
        '400': '#D4E157', 
        '500': '#CDDC39', 
        '600': '#C0CA33', 
        '700': '#AFB42B', 
        '800': '#9E9D24', 
        '900': '#827717', 
        'A100': '#F4FF81', 
        'A200': '#EEFF41', 
        'A400': '#C6FF00', 
        'A700': '#AEEA00', 
      },

      'yellow': { 
        '50': '#FFFDE7', 
        '100': '#FFF9C4', 
        '200': '#FFF59D', 
        '300': '#FFF176', 
        '400': '#FFEE58', 
        '500': '#FFEB3B', 
        '600': '#FDD835', 
        '700': '#FBC02D', 
        '800': '#F9A825', 
        '900': '#F57F17', 
        'A100': '#FFFF8D', 
        'A200': '#FFFF00', 
        'A400': '#FFEA00', 
        'A700': '#FFD600', 
      },

      'amber': { 
        '50': '#FFF8E1', 
        '100': '#FFECB3', 
        '200': '#FFE082', 
        '300': '#FFD54F', 
        '400': '#FFCA28', 
        '500': '#FFC107', 
        '600': '#FFB300', 
        '700': '#FFA000', 
        '800': '#FF8F00', 
        '900': '#FF6F00', 
        'A100': '#FFE57F', 
        'A200': '#FFD740', 
        'A400': '#FFC400', 
        'A700': '#FFAB00', 
      },

      'orange': { 
        '50': '#FFF3E0', 
        '100': '#FFE0B2', 
        '200': '#FFCC80', 
        '300': '#FFB74D', 
        '400': '#FFA726', 
        '500': '#FF9800', 
        '600': '#FB8C00', 
        '700': '#F57C00', 
        '800': '#EF6C00', 
        '900': '#E65100', 
        'A100': '#FFD180', 
        'A200': '#FFAB40', 
        'A400': '#FF9100', 
        'A700': '#FF6D00', 
      },

      'deep-orange': { 
        '50': '#FBE9E7', 
        '100': '#FFCCBC', 
        '200': '#FFAB91', 
        '300': '#FF8A65', 
        '400': '#FF7043', 
        '500': '#FF5722', 
        '600': '#F4511E', 
        '700': '#E64A19', 
        '800': '#D84315', 
        '900': '#BF360C', 
        'A100': '#FF9E80', 
        'A200': '#FF6E40', 
        'A400': '#FF3D00', 
        'A700': '#DD2C00', 
      },

      'brown': { 
        '50': '#EFEBE9', 
        '100': '#D7CCC8', 
        '200': '#BCAAA4', 
        '300': '#A1887F', 
        '400': '#8D6E63', 
        '500': '#795548', 
        '600': '#6D4C41', 
        '700': '#5D4037', 
        '800': '#4E342E', 
        '900': '#3E2723', 
      },

      'grey': { 
        '50': '#FAFAFA', 
        '100': '#F5F5F5', 
        '200': '#EEEEEE', 
        '300': '#E0E0E0', 
        '400': '#BDBDBD', 
        '500': '#9E9E9E', 
        '600': '#757575', 
        '700': '#616161', 
        '800': '#424242', 
        '900': '#212121', 
      },

      'blue-grey': { 
        '50': '#ECEFF1', 
        '100': '#CFD8DC', 
        '200': '#B0BEC5', 
        '300': '#90A4AE', 
        '400': '#78909C', 
        '500': '#607D8B', 
        '600': '#546E7A', 
        '700': '#455A64', 
        '800': '#37474F', 
        '900': '#263238', 
      },

      'black': { 
        '500': '#000000', 
        'Text': 'rgba(0,0,0,0.87)', 
        'Secondary Text': 'rgba(0,0,0,0.54)', 
        'Icons': 'rgba(0,0,0,0.54)', 
        'Disabled': 'rgba(0,0,0,0.26)', 
        'Hint Text': 'rgba(0,0,0,0.26)', 
        'Dividers': 'rgba(0,0,0,0.12)', 
      },

      'white': { 
        '500': '#ffffff', 
        'Text': '#ffffff', 
        'Secondary Text': 'rgba(255,255,255,0.7)', 
        'Icons': '#ffffff', 
        'Disabled': 'rgba(255,255,255,0.3)', 
        'Hint Text': 'rgba(255,255,255,0.3)', 
        'Dividers': 'rgba(255,255,255,0.12)', 
      },

    },

    get: function (color, shade) {
      return this.palette[color][shade || '500'];
    },

    find: function(color){
      var colors = color.split('-'),
          color, 
          shade = 500;

      if(colors.length == 3){
        color = colors[0]+'-'+colors[1];
        shade = colors[2];
      }
      if(colors.length == 2){
        if(colors[1].indexOf('0') > 0){
          color = colors[0];
          shade = colors[1];
        }else{
          color = colors[0]+'-'+colors[1];
        }
      }
      return this.get( color, shade );
    },
    
    random: function(shade) {
      var colors, color, shades;
    
      colors = keys(this.palette);
      color = colors[random(0, colors.length - 1)];
      
      if (shade == null) {
        shades = keys(color);
        shade = shades[random(0, shades.length - 1)];
      }
      
      return this.get(color, shade);
    }
  };
});

angular.module('UURootService', []);

var RootService = ['$http', '$q', function ($http, $q){


	this.currentUSer = null;
	this.countries = null;
	this.states = null;
	this.cities = null;
	this.categories = null;
	
	this.getCurrentUser = function () {
		return this.currentUSer;
	};

	this.setCurrentUser = function (user){
		this.currentUSer = user;
	};


	this.getCountries = function(){
		return this.countries;
	};

	this.setCountries = function(countries){
		this.countries = countries;
	};

	this.getStates = function(){
		return this.states;
	};

	this.setStates = function(states){
		this.states = states;
	};

	this.getCities = function(){
		return this.cities;
	};

	this.setCities = function(cities){
		this.cities = cities;
	};

	this.getCategories = function(){
		return this.categories;
	};

	this.setCategories = function(categories){
		this.categories = categories;
	};

	


	/**
        * Initialize index
        * @type {number}
    */
    var index = 0;

    /**
     * Boolean to show error if new notification is invalid
     * @type {boolean}
     */
    this.invalidNotification = false;
    /**
     * Placeholder for notifications
     *
     * We use a hash with auto incrementing key
     * so we can use "track by" in ng-repeat
     *
     * @type 
     */
	this.notifications = {};

	/**
	 * HTTP request function to the server.
	 * @param  {string} method  "GET", "POST", "PUT", "DELETE"
	 * @param  {string} url     /url/something/1
	 * @param  {obj} data       Data to be send to the server
	 * @return {promise}        request promise
	 */
	this.sendRequest = function(method, url, data){
		var deferred = $q.defer();
		var request;
		if(!url){
			throw 'url is Undefined';
		} else if (typeof url !== 'string') {
			throw 'url should be type of string, instead got ' + typeof url + '.';
		}
		switch(method.toLowerCase()){
			case 'get':
				if(data){
					request = $http.get(url, data);
				} else {
					request = $http.get(url);
				}
				break;
			case 'post':
				if(data){
					request = $http.post(url, data);
				} else {
					throw new Error("No data object");
				}
				break;
			case 'put':
				if(data) {
					request = $http.put(url, data);
				} else {
					throw new Error("No data object");
				}
				break;
			case 'delete':
				request = $http.delete(url, data);
				break;
		}
		if(request) {
			request.success(function (data) {
				deferred.resolve(data);
			});
			request.error(function (error) {
				deferred.reject(error);
			});
			return deferred.promise;
		} else {
			throw new Error("Undefined method " + "'" + method + "'");
		}
	};


	this.addNotification = function(notification, type){
      	var i;
      	var style = "background: rgba(0,0,0,0.6) !important;";
      	if(!notification){
        	this.invalidNotification = true;
        	return;
      	}

      	i = index++;
      	this.invalidNotification = false;
      	if(!type){
      		type ="normal";
      	}
      	else if (type === 'error'){
      		style = "background: rgba(255, 0, 0, 0.6) !important;";
      	}
      	else if (type === 'success'){
      		style = "background: rgba(0,128,0,0.6) !important";
      	}
  		notification = {
  			text: notification,
  			type: type,
  			style: style
  		};
  		if(this.notifications)
      		this.notifications[i] = notification;
      	else
      		this.notifications = [notification];
      	console.log('notifications ',this.notifications);
	};

	this.getNotifications = function (){
		return this.notifications;
	};

	this.setNotifications = function (not){
		this.notifications = not;
	};

	this.formatDate = function (date) {
		date = moment(date).format('YYYY-MM-DD');
		return date;
	};


}];


angular.module('UURootService')
	.service('RootService', RootService);
/**
 * 0.1.1
 * Deferred load js/css file, used for ui-jq.js and Lazy Loading.
 * 
 * @ flatfull.com All Rights Reserved.
 * Author url: http://themeforest.net/user/flatfull
 */
  angular
  	.module('ui.load', [])
	.service('uiLoad', uiLoad);
	
	uiLoad.$inject = ['$document', '$q', '$timeout'];
	function uiLoad($document, $q, $timeout) {

		var loaded = [];
		var promise = false;
		var deferred = $q.defer();

		/**
		 * Chain loads the given sources
		 * @param srcs array, script or css
		 * @returns {*} Promise that will be resolved once the sources has been loaded.
		 */
		this.load = function (srcs) {
			srcs = angular.isArray(srcs) ? srcs : srcs.split(/\s+/);
			var self = this;
			if(!promise){
				promise = deferred.promise;
			}
			angular.forEach(srcs, function(src) {
				promise = promise.then( function(){
					return src.indexOf('.css') >=0 ? self.loadCSS(src) : self.loadScript(src);
				} );
			});
			deferred.resolve();
			return promise;
		}

		/**
		 * Dynamically loads the given script
		 * @param src The url of the script to load dynamically
		 * @returns {*} Promise that will be resolved once the script has been loaded.
		 */
		this.loadScript = function (src) {
			if(loaded[src]) return loaded[src].promise;

			var deferred = $q.defer();
			var script = $document[0].createElement('script');
			script.src = src;
			script.onload = function (e) {
				$timeout(function () {
					deferred.resolve(e);
				});
			};
			script.onerror = function (e) {
				$timeout(function () {
					deferred.reject(e);
				});
			};
			$document[0].body.appendChild(script);
			loaded[src] = deferred;

			return deferred.promise;
		};

		/**
		 * Dynamically loads the given CSS file
		 * @param href The url of the CSS to load dynamically
		 * @returns {*} Promise that will be resolved once the CSS file has been loaded.
		 */
		this.loadCSS = function (href) {
			if(loaded[href]) return loaded[href].promise;

			var deferred = $q.defer();
			var style = $document[0].createElement('link');
			style.rel = 'stylesheet';
			style.type = 'text/css';
			style.href = href;
			style.onload = function (e) {
				$timeout(function () {
					deferred.resolve(e);
				});
			};
			style.onerror = function (e) {
				$timeout(function () {
					deferred.reject(e);
				});
			};
			$document[0].head.appendChild(style);
			loaded[href] = deferred;

			return deferred.promise;
		};
	}


var vendorService = ['$http', '$q', 'RootService',  function ($http, $q, clubService){

	this.products = null;


	this.getProducts = function(){
		return this.products;
	};

	this.setProducts = function(products){
		this.products = products;
	};

	this.addProduct = function(product){
		var array = [];
		angular.forEach(this.products, function(pro, key){
			if(pro.productId)
				array.push(pro);
		});
		array.push(product);
		this.setProducts(array);
	};

	this.removeProduct = function(product){
		var array= [];
		angular.forEach(this.products, function(pro, key){
			if(pro.productId != product.productId || !pro.productId){
				array.push(pro);
			}
		});
		this.setProducts(product);
	};

}];

angular.module('app')
	.service('vendorService', vendorService);
(function() {
  'use strict';
  angular
    .module('app')
    .controller('AlertCtrl', AlertCtrl)
    .controller('AsideCtrl', AsideCtrl)
    .controller('ButtonCtrl', ButtonCtrl)
    .controller('DropdownCtrl', DropdownCtrl)
    .controller('CollapseCtrl', CollapseCtrl)
    .controller('DatepickerCtrl', DatepickerCtrl)
    .controller('TimepickerCtrl', TimepickerCtrl)
    .controller('ModalCtrl', ModalCtrl)
    .controller('SelectCtrl', SelectCtrl)
    .controller('TabCtrl', TabCtrl)
    .controller('TooltipCtrl', TooltipCtrl)
    .controller('PopoverCtrl', PopoverCtrl)
    .controller('TypeaheadCtrl', TypeaheadCtrl);

    AlertCtrl.$inject = ['$scope', '$alert'];
    function AlertCtrl($scope, $alert) {
      $scope.alert = {title: 'Holy guacamole!', content: 'Best check yo self, you\'re not looking too good.', type: 'info'};

      // Service usage
      var myAlert = $alert({title: 'Holy guacamole!', content: 'Best check yo self, you\'re not looking too good.', placement: 'top', type: 'info', keyboard: true, show: false});
      $scope.showAlert = function() {
        myAlert.show(); // or myAlert.$promise.then(myAlert.show) if you use an external html template
      };
    }

    function AsideCtrl($scope) {
      $scope.aside = {title: 'Title', content: 'Hello Aside<br />This is a multiline message!'};
    }

    function ButtonCtrl($scope) {
      $scope.button = {
        toggle: false,
        checkbox: {left: false, middle: true, right: false},
        radio: 0
      };
    }

    DropdownCtrl.$inject = ['$scope', '$alert'];
    function DropdownCtrl($scope, $alert) {
      $scope.dropdown = [
        {text: '<i class="fa fa-fw m-r-sm fa-download"></i>Another action', href: '#anotherAction'},
        {text: '<i class="fa fa-fw m-r-sm fa-globe"></i>Display an alert', click: '$alert("Holy guacamole!")'},
        {text: '<i class="fa fa-fw m-r-sm fa-external-link"></i>External link', href: '/auth/facebook', target: '_self'},
        {divider: true},
        {text: 'Separated link', href: '#separatedLink'}
      ];

      $scope.$alert = function(title) {
        $alert({title: title, content: 'Best check yo self, you\'re not looking too good.', placement: 'top', type: 'info', keyboard: true, show: true});
      };
    }

    CollapseCtrl.$inject = ['$scope', '$templateCache'];
    function CollapseCtrl($scope, $templateCache) {
      $scope.panels = [
        {title:'Collapsible Group Item #1', body: 'Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch.'},
        {title:'Collapsible Group Item #2', body: 'Food truck fixie locavore, accusamus mcsweeney\'s marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee.'},
        {title:'Collapsible Group Item #3', body: 'Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney\'s organic lomo retro fanny pack lo-fi farm-to-table readymade.'}
      ];

      $scope.panels.activePanel = 1;

      $scope.pushPanel = function() {
        $scope.panels.push({title: 'Collapsible Group Item #4', body: 'Reprehenderit butcher retro keffiyeh dreamcatcher synth. Cosby sweater eu banh mi, qui irure terry richardson ex squid.'});
      };
    }

    function DatepickerCtrl($scope) {
      $scope.selectedDate = new Date();
      $scope.selectedDateAsNumber = Date.UTC(1986, 1, 22);
      // $scope.fromDate = new Date();
      // $scope.untilDate = new Date();
      $scope.getType = function(key) {
        return Object.prototype.toString.call($scope[key]);
      };

      $scope.clearDates = function() {
        $scope.selectedDate = null;
      };
    }

    function TimepickerCtrl($scope) {
      $scope.time = new Date(1970, 0, 1, 10, 30);
      $scope.selectedTimeAsNumber = 10 * 36e5;
      $scope.selectedTimeAsString = '10:00';
      $scope.sharedDate = new Date(new Date().setMinutes(0));
    }

    ModalCtrl.$inject = ['$scope', '$modal'];
    function ModalCtrl($scope, $modal) {
      $scope.modal = {title: 'Title', content: 'Hello Modal<br />This is a multiline message!'};

      // Controller usage example
      //
      // var myModal = $modal({title: 'Title', content: 'Hello Modal<br />This is a multiline message!', show: false});
      // $scope.showModal = function() {
      //   myModal.$promise.then(myModal.show);
      // };
      // $scope.hideModal = function() {
      //   myModal.$promise.then(myModal.hide);
      // };
    }

    function SelectCtrl($scope) {
      $scope.selectedIcon = '';
      $scope.selectedIcons = ['Globe', 'Heart'];
      $scope.icons = [
        {value: 'Gear', label: '<i class="fa fa-gear m-r-sm"></i> Gear'},
        {value: 'Globe', label: '<i class="fa fa-globe m-r-sm"></i> Globe'},
        {value: 'Heart', label: '<i class="fa fa-heart m-r-sm"></i> Heart'},
        {value: 'Camera', label: '<i class="fa fa-camera m-r-sm"></i> Camera'}
      ];

      $scope.selectedMonth = 0;
      $scope.months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    }

    function TabCtrl($scope) {
      $scope.tabs = [
        {title:'Home', content: 'Raw denim you probably haven\'t heard of them jean shorts Austin. Nesciunt tofu stumptown aliqua, retro synth master cleanse. Mustache cliche tempor, williamsburg carles vegan helvetica.'},
        {title:'Profile', content: 'Food truck fixie locavore, accusamus mcsweeney\'s marfa nulla single-origin coffee squid. Exercitation +1 labore velit, blog sartorial PBR leggings next level wes anderson artisan four loko farm-to-table craft beer twee.'},
        {title:'About', content: 'Etsy mixtape wayfarers, ethical wes anderson tofu before they sold out mcsweeney\'s organic lomo retro fanny pack lo-fi farm-to-table readymade.'}
      ];

      $scope.tabs.activeTab = 1;

      $scope.pushTab = function() {
        $scope.tabs.push({title: 'Contact', content: 'Reprehenderit butcher retro keffiyeh dreamcatcher synth. Cosby sweater eu banh mi, qui irure terry richardson ex squid.'});
      };
    }

    function TooltipCtrl($scope) {
      $scope.tooltip = {title: 'Hello Tooltip!', checked: false};
    }

    function PopoverCtrl($scope) {
      $scope.popover = {title: 'Title', content: 'Hello Popover<br />This is a multiline message!'};
    }

    TypeaheadCtrl.$inject = ['$scope', '$http'];
    function TypeaheadCtrl($scope, $http) {

      $scope.selectedState = '';
      $scope.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];

      $scope.selectedIcon = '';
      $scope.icons = [
        {value: 'Gear', label: '<i class="fa fa-gear"></i> Gear'},
        {value: 'Globe', label: '<i class="fa fa-globe"></i> Globe'},
        {value: 'Heart', label: '<i class="fa fa-heart"></i> Heart'},
        {value: 'Camera', label: '<i class="fa fa-camera"></i> Camera'}
      ];

      $scope.selectedAddress = '';
      $scope.getAddress = function(viewValue) {
        var params = {address: viewValue, sensor: false};
        return $http.get('http://maps.googleapis.com/maps/api/geocode/json', {params: params})
        .then(function(res) {
          return res.data.results;
        });
      };
    }
})();


var AuthController = ['$auth', '$state','$http','$rootScope','$scope','RootService', function($auth, $state, $http, $rootScope, scope, $RootService){
	var vm = this;
  console.log('enter on the AuthController' );
  scope.user = null;
  scope.email = null;
  scope.password = null;
  vm.loginError = false;
  scope.loginErrorText = null ;
  scope.notifications = $RootService.getNotifications();
  scope.bForm = true;
  scope.bEmailConfirmation = false;

  /*===================================
  =            social auth            =
  ===================================*/

  scope.authenticate = function(provider) {
    var request = $auth.authenticate(provider);
    request.then(function(response){
      console.log('auth response :D', response);
      return $RootService.sendRequest('get','/session/user');
    }, function(error){
      console.log('error google', error);
    }).then(function(response){
      console.log('user:D', response);
      // Stringify the returned data to prepare it
      // to go into local storage
      var user = JSON.stringify(response);
      // The user's authenticated state gets flipped to
      // true so we can now show parts of the UI that rely
      // on the user being logged in
      $rootScope.authenticated = true;
      // Putting the user's data on $rootScope allows
      // us to access it anywhere across the app
      if(response){
          // Everything worked out so we can now redirect to
          // the users state to view the data
          console.log('response', response);
          if(response.access_level){
            $rootScope.currentUser = response.data;   
            $state.go('app.home');
          }else{
            $state.go('access.select-user');
          }
      }
    }, function(error){

    });


  };
  /*=====  End of social auth  ======*/
  scope.tries = 0;
  scope.login = function() {
    console.log('enter to login');
      var credentials = {
          email: scope.email,
          password: scope.password
      };
      $auth.login(credentials).then(function() {
          // Return an $http request for the now authenticated
          // user so that we can flatten the promise chain
          // $RootService.sendRequest('post', '/signup', user);
          return $RootService.sendRequest('get','/session/user');
      // Handle errors
      }, function(error) {
          vm.loginError = true;
          scope.loginErrorText = error.data.error;
          $RootService.addNotification(scope.loginErrorText); 

      // Because we returned the $http.get request in the $auth.login
      // promise, we can chain the next promise to the end here
      }).then(function(response) {
          console.log('authenticated ', response);
          // Stringify the returned data to prepare it
          // to go into local storage
          var user = JSON.stringify(response);
          // The user's authenticated state gets flipped to
          // true so we can now show parts of the UI that rely
          // on the user being logged in
          $rootScope.authenticated = true;
          // Putting the user's data on $rootScope allows
          // us to access it anywhere across the app
          if(response.active || response.user.active){
            // Everything worked out so we can now redirect to
            // the users state to view the data
            console.log('response', response);
            if(response.access_level){
              $rootScope.currentUser = response.data;   
              $state.go('app.home');
            }else{
              $state.go('access.select-user');
            }
            
          }else if(response.verify){
            $RootService.addNotification('Please verify your email '+ response.email, 'error');
            scope.tries+= 1;
            if(scope.tries === 3 || scope.tries === 6){
              $RootService.addNotification('we sent you another email verification, please look at your email'+ scope.email);
            }
          }
      }, function(error){
          console.log(error);
      });
  };



  scope.signUp = function(){
      console.log('register the user', scope.user);
      scope.loading =  true;
      var user = {
          name: scope.user.firstName+" "+scope.user.lastName,
          firstName: scope.user.firstName,
          lastName: scope.user.lastName,
          email: scope.user.email,
          password: scope.user.password
      };
      if(scope.user.firstName && scope.user.lastName && scope.user.email && scope.user.password === scope.user.repeatPassword){
          var request= $RootService.sendRequest('post', '/signup', user);
          request.then( function(response){
              console.log('registration response: ', response);
              if(response === 'account already created'){
                $RootService.addNotification('account already created', 'error');
              }else{
                $RootService.addNotification('registration completed!', 'success');
                scope.bForm = false;
                scope.bEmailConfirmation = true;
                scope.loading = false;  
              }
              
              
          }, function(error){
              $RootService.addNotification(error.error, 'error');
              console.log(' error on registration', error);
          });
      }else{
        $RootService.addNotification('please fill all the fields', 'error');
      }
  };


  vm.logout = function() {

    $auth.logout().then(function() {
        // Flip authenticated to false so that we no longer
        // show UI elements dependant on the user being logged in
        $rootScope.authenticated = false;
        // Remove the current user info from rootscope
        $rootScope.currentUser = null;
        $state.go('access.signin');

    });
  };

  if($rootScope.authenticated === true){
    vm.logout();
  }
  /**
   * Add a notification
   *
   * @param notification
   */
  scope.add = function(notification){
    $RootService.addNotification(notification);
  };

}];


angular.module('app')
  .controller('AuthController', AuthController);
(function() {
  'use strict';
  angular
    .module('app')
    .controller('AccordionCtl', AccordionCtl)
    .controller('AlertCtl', AlertCtl)
    .controller('ButtonsCtl', ButtonsCtl)
    .controller('CarouselCtl', CarouselCtl)
    .controller('DropdownCtl', DropdownCtl)
    .controller('ModalInstanceCtl', ModalInstanceCtl)
    .controller('ModalCtl', ModalCtl)
    .controller('PaginationCtl', PaginationCtl)
    .controller('PopoverCtl', PopoverCtl)
    .controller('ProgressCtl', ProgressCtl)
    .controller('TabsCtl', TabsCtl)
    .controller('RatingCtl', RatingCtl)
    .controller('TabsCtl', TabsCtl)
    .controller('TooltipCtl', TooltipCtl)
    .controller('TypeaheadCtl', TypeaheadCtl)
    .controller('DatepickerCtl', DatepickerCtl)
    .controller('TimepickerCtl', TimepickerCtl)
    ;
    function AccordionCtl($scope) {
      var vm = $scope;
      vm.oneAtATime = true;
      vm.groups = [
        {
          title: 'Accordion group header - #1',
          content: 'Dynamic group body - #1'
        },
        {
          title: 'Accordion group header - #2',
          content: 'Dynamic group body - #2'
        }
      ];

      vm.items = ['Item 1', 'Item 2', 'Item 3'];

      $scope.addItem = function() {
        var newItemNo = vm.items.length + 1;
        vm.items.push('Item ' + newItemNo);
      };

      vm.status = {
        isFirstOpen: true,
        isFirstDisabled: false
      };
    }

    function AlertCtl($scope) {
      var vm = $scope;
      vm.alerts = [
        { type: 'danger', msg: 'Oh snap! Change a few things up and try submitting again.' },
        { type: 'success', msg: 'Well done! You successfully read this important alert message.' }
      ];

      vm.addAlert = function() {
        vm.alerts.push({msg: 'Another alert!'});
      };

      vm.closeAlert = function(index) {
        vm.alerts.splice(index, 1);
      };
    }

    function ButtonsCtl($scope) {
      var vm = $scope;
      vm.singleModel = 1;

      vm.radioModel = 'Middle';

      vm.checkModel = {
        left: false,
        middle: true,
        right: false
      };

      vm.checkResults = [];

      vm.$watchCollection('checkModel', function () {
        vm.checkResults = [];
        angular.forEach(vm.checkModel, function (value, key) {
          if (value) {
            vm.checkResults.push(key);
          }
        });
      });
    }

    function CarouselCtl($scope) {
      var vm = $scope;
      vm.myInterval = 5000;
      vm.noWrapSlides = false;
      var slides = vm.slides = [];
      $scope.addSlide = function() {
        slides.push({
          image: '../assets/images/c' + slides.length + '.jpg',
          text: ['Carousel text #0','Carousel text #1','Carousel text #2','Carousel text #3'][slides.length % 4]
        });
      };
      for (var i=0; i<4; i++) {
        vm.addSlide();
      }
    }

    function DropdownCtl($scope) {
      var vm = $scope;
      vm.items = [
        'The first choice!',
        'And another choice for you.',
        'but wait! A third!'
      ];

      vm.status = {
        isopen: false
      };

      vm.toggled = function(open) {
        //console.log('Dropdown is now: ', open);
      };

      vm.toggleDropdown = function($event) {
        $event.preventDefault();
        $event.stopPropagation();
        vm.status.isopen = !vm.status.isopen;
      };
    }
    
    ModalInstanceCtl.$inject = ['$scope', '$uibModalInstance', 'items'];
    function ModalInstanceCtl($scope, $uibModalInstance, items) {
      $scope.items = items;
      $scope.selected = {
        item: $scope.items[0]
      };

      $scope.ok = function () {
        $uibModalInstance.close($scope.selected.item);
      };

      $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
      };
    }

    ModalCtl.$inject = ['$scope', '$uibModal', '$log'];
    function ModalCtl($scope, $uibModal, $log) {
      $scope.items = ['item1', 'item2', 'item3'];
      $scope.open = function (size) {
        var modalInstance = $uibModal.open({
          templateUrl: 'myModalContent.html',
          controller: 'ModalInstanceCtl',
          size: size,
          resolve: {
            items: function () {
              return $scope.items;
            }
          }
        });

        modalInstance.result.then(function (selectedItem) {
          $scope.selected = selectedItem;
        }, function () {
          $log.info('Modal dismissed at: ' + new Date());
        });
      };
    }

    function PaginationCtl($scope) {
      $scope.totalItems = 64;
      $scope.currentPage = 4;

      $scope.setPage = function (pageNo) {
        $scope.currentPage = pageNo;
      };

      $scope.pageChanged = function() {
        
      };

      $scope.maxSize = 5;
      $scope.bigTotalItems = 175;
      $scope.bigCurrentPage = 1;
    }

    function PopoverCtl($scope) {
      $scope.dynamicPopover = 'Hello, World!';
      $scope.dynamicPopoverTitle = 'Title';
    }

    function ProgressCtl($scope) {
      $scope.max = 200;

      $scope.random = function() {
        var value = Math.floor((Math.random() * 100) + 1);
        var type;

        if (value < 25) {
          type = 'success';
        } else if (value < 50) {
          type = 'info';
        } else if (value < 75) {
          type = 'warning';
        } else {
          type = 'danger';
        }

        $scope.showWarning = (type === 'danger' || type === 'warning');

        $scope.dynamic = value;
        $scope.type = type;
      };
      $scope.random();

      $scope.randomStacked = function() {
        $scope.stacked = [];
        var types = ['success', 'info', 'warning', 'danger'];

        for (var i = 0, n = Math.floor((Math.random() * 4) + 1); i < n; i++) {
            var index = Math.floor((Math.random() * 4));
            $scope.stacked.push({
              value: Math.floor((Math.random() * 30) + 1),
              type: types[index]
            });
        }
      };
      $scope.randomStacked();
    }

    function TabsCtl($scope) {
      $scope.tabs = [
        { title:'Dynamic Title 1', content:'Dynamic content 1' },
        { title:'Dynamic Title 2', content:'Dynamic content 2', disabled: true }
      ];
    }

    function RatingCtl($scope) {
      $scope.rate = 7;
      $scope.max = 10;
      $scope.isReadonly = false;

      $scope.hoveringOver = function(value) {
        $scope.overStar = value;
        $scope.percent = 100 * (value / $scope.max);
      };
    }

    function TooltipCtl($scope) {
      $scope.dynamicTooltip = 'Hello, World!';
      $scope.dynamicTooltipText = 'dynamic';
      $scope.htmlTooltip = 'I\'ve been made <b>bold</b>!';
    }

    TypeaheadCtl.$inject = ['$scope', '$http'];
    function TypeaheadCtl($scope, $http) {
      $scope.selected = undefined;
      $scope.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];
      // Any function returning a promise object can be used to load values asynchronously
      $scope.getLocation = function(val) {
        return $http.get('http://maps.googleapis.com/maps/api/geocode/json', {
          params: {
            address: val,
            sensor: false
          }
        }).then(function(res){
          var addresses = [];
          angular.forEach(res.data.results, function(item){
            addresses.push(item.formatted_address);
          });
          return addresses;
        });
      };
    }

    function DatepickerCtl($scope) {
      $scope.today = function() {
        $scope.dt = new Date();
      };
      $scope.today();

      $scope.clear = function () {
        $scope.dt = null;
      };

      // Disable weekend selection
      $scope.disabled = function(date, mode) {
        return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
      };

      $scope.toggleMin = function() {
        $scope.minDate = $scope.minDate ? null : new Date();
      };
      $scope.toggleMin();

      $scope.open = function($event) {
        $event.preventDefault();
        $event.stopPropagation();

        $scope.opened = true;
      };

      $scope.dateOptions = {
        formatYear: 'yy',
        startingDay: 1,
        class: 'datepicker'
      };

      $scope.initDate = new Date('2016-15-20');
      $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
      $scope.format = $scope.formats[0];
    }

    function TimepickerCtl($scope) {
      $scope.mytime = new Date();

      $scope.hstep = 1;
      $scope.mstep = 15;

      $scope.options = {
        hstep: [1, 2, 3],
        mstep: [1, 5, 10, 15, 25, 30]
      };

      $scope.ismeridian = true;
      $scope.toggleMode = function() {
        $scope.ismeridian = ! $scope.ismeridian;
      };

      $scope.update = function() {
        var d = new Date();
        d.setHours( 14 );
        d.setMinutes( 0 );
        $scope.mytime = d;
      };

      $scope.changed = function () {
        //console.log('Time changed to: ' + $scope.mytime);
      };

      $scope.clear = function() {
        $scope.mytime = null;
      };
    }
})();

var categoriesCtrl = ['$state', '$scope','RootService','adminService',  function($state, scope, clubService,  adminService){

	scope.init = function(){
		getCategories();
	};

	function getCategories(){

			var request =clubService.sendRequest('GET', '/categories', config);
			request.then(function(response){
				scope.categories = response;
				adminService.setCategories(response);
				console.log('categories!', scope.categories);
			}, function(error){	
				clubService.addNotification('error getting categories', error);
			});
		
	}

	scope.addCategory = function (){
		var category = {
			name: "", 
			code: "", 
			active: false
		};

		adminService.addCategory(category);
		scope.categories = adminService.getCategories();
	};


	scope.init();
}];


angular.module('app')
	.controller('categoriesCtrl', categoriesCtrl);
// code style: https://github.com/johnpapa/angular-styleguide 


    angular
      .module('app')
      .controller('ChartCtrl', Chart);

      function Chart($scope){
        var vm = $scope;
        vm.p_p_1 = [{data: 70, label: 'Server'}, {data: 30, label: 'Client'}];
        vm.p_p_2 = [{data: 75, label: 'iPhone'}, {data: 20, label: 'iPad'}];
        vm.p_p_3 = [{data: 30, label: 'Server'}, {data: 70, label: 'Client'}];
        vm.p_p_4 = [{data: 10, label: 'Apple'}, {data: 15, label: 'Google'}, {data: 35, label: 'Flatty'}, {data: 45, label: 'Other'}];
        
        vm.p_l_1 = [[1, 6.1], [2, 6.3], [3, 6.4], [4, 6.6], [5, 7.0], [6, 7.7], [7, 8.3]];
        vm.p_l_2 = [[1, 5.5], [2, 5.7], [3, 6.4], [4, 7.0], [5, 7.2], [6, 7.3], [7, 7.5]];
        vm.p_l_3 = [[1, 2], [2, 1.6], [3, 2.4], [4, 2.1], [5, 1.7], [6, 1.5], [7, 1.7]];
        vm.p_l_4 = [[1, 3], [2, 2.6], [3, 3.2], [4, 3], [5, 3.5], [6, 3], [7, 3.5]];
        vm.p_l_5 = [[1, 3.6], [2, 3.5], [3, 6], [4, 4], [5, 4.3], [6, 3.5], [7, 3.6]];
        vm.p_l_6 = [[1, 10], [2, 8], [3, 27], [4, 25], [5, 50], [6, 30], [7, 25]];

        vm.p_b_1 = [[1, 2], [2, 4], [3, 5], [4, 7], [5, 6], [6, 4], [7, 5], [8, 4]];
        vm.p_b_2 = [[3, 1], [2, 2], [6, 3], [5, 4], [7, 5]];
        vm.p_b_3 = [[1, 3], [2, 4], [3, 3], [4, 6], [5, 5], [6, 4], [7, 5], [8, 3]];
        vm.p_b_4 = [[1, 2], [2, 3], [3, 2], [4, 5], [5, 4], [6, 3], [7, 4], [8, 2]];

        vm.world_markers = [
            {latLng: [52.5167, 13.3833], name: 'Berlin'},
            {latLng: [48.8567, 2.3508], name: 'Paris'},
            {latLng: [35.6833, 139.6833], name: 'Tokyo'},
            {latLng: [40.7127, -74.0059], name: 'New York City'},
            {latLng: [49.2827, -123.1207], name: 'City of Vancouver'},
            {latLng: [22.2783, 114.1747], name: 'Hong Kong'},
            {latLng: [55.7500, 37.6167], name: 'Moscow'},
            {latLng: [37.7833, -122.4167], name: 'San Francisco'},
            {latLng: [39.9167, 116.3833], name: 'Beijing'}
          ];

          vm.usa_markers = [
            {latLng: [40.71, -74.00], name: 'New York'},
            {latLng: [34.05, -118.24], name: 'Los Angeles'},
            {latLng: [41.87, -87.62], name: 'Chicago'},
            {latLng: [29.76, -95.36], name: 'Houston'},
            {latLng: [39.95, -75.16], name: 'Philadelphia'},
            {latLng: [38.90, -77.03], name: 'Washington'},
            {latLng: [37.36, -122.03], name: 'Silicon Valley'}
          ];

          vm.cityAreaData = [      
            605.16,
            310.69,
            405.17,
            748.31,
            207.35,
            217.22,
            137.70,
            280.71,
            210.32,
            325.42
          ]
      }


var clubCtrl =  ['$rootScope', '$state', '$scope', 'RootService', 'MembersService', function($rootScope, $state, scope,  clubService, membersService){

	scope.init = function(){
		getClub();
		getModels();
		scope.club;
		scope.clubModelos;
	};

	function getClub(){
		if(membersService.getClub())
			scope.club = membersService.getClub();
		else{
			$state.go('app.home');
		}

		//console.log('scope.club', scope.club);
	}

	function getModels(){
		scope.clubModelos = [];
		angular.forEach(scope.club.items, function(item, key){
			if(scope.clubModelos.indexOf(item.model_name) === -1){
				scope.clubModelos.push({brand: item.brand_name , modelo: item.model_name });
			}
		});
		//console.log('scope.clubModelos!!!',scope.clubModelos);
		asignItemsToModel(scope.clubModelos);
	}



	function asignItemsToModel(modelos){
		angular.forEach(scope.clubModelos, function(modelo, key){
			modelo.items = [];
			//console.log('modelo', modelo);
			angular.forEach(scope.club.items, function(item, key){
				//console.log('items here all of them', item);
				if(item.model_name === modelo.modelo && item.brand_name === modelo.brand){
					modelo.items.push(item);
					//console.log('new item!', item);
				}
			});
		});
		//console.log('scope.clubModelos!!!',scope.clubModelos);
	}


	scope.goToClubModelo = function(modelo){
		membersService.setClubModelo(modelo);
		$state.go('app.modelo');
	}

	scope.init();

}];



angular.module('app')
	.controller('clubCtrl', clubCtrl);




var clubModeloCtrl =  ['$rootScope', '$state', '$scope', 'RootService', 'MembersService', function($rootScope, $state, scope,  clubService, membersService){

	scope.clubModelo = null;
	scope.init = function(){
		
		getClubModelo();
	};

	function getClubModelo(){
		if(membersService.getClubModelo()){
			scope.clubModelo = membersService.getClubModelo();
			console.log('scope.clubModelo', scope.clubModelo);
		}
		else{
			$state.go('app.nearby');
		}
	}

	scope.addItem = function(){
		var array = [];
		angular.forEach(scope.clubModelo.items, function(item, key){
			if(item.itemId)
				array.push(item);
		});
		scope.item = {
			itemId: 'clubIn',
			categoryId: scope.clubModelo.items[0].categoryId, 
			productId: scope.clubModelo.items[0].productId, 
			brandId: scope.clubModelo.items[0].brandId, 
			modelId: scope.clubModelo.items[0].modelId, 
			category_name: scope.clubModelo.items[0].category_name, 
			product_name: scope.clubModelo.items[0].product_name, 
			brand_name: scope.clubModelo.items[0].brand_name, 
			model_name: scope.clubModelo.items[0].model_name, 
			quantity: 1, 
			price: 0, 
			description: "", 
			active: true
		};
		array.push(scope.item);
		scope.clubModelo.items = array;
	};

	scope.haveItem = function(){
		console.log('user memberId', $rootScope.currentUser.memberId);
		var booleano = false;
		angular.forEach(scope.clubModelo.items, function(item, key){
			if(item.memberId === $rootScope.currentUser.memberId)
				booleano = true;
		});
		return booleano;
	};


	scope.init();
}];


angular.module('app')
	.controller('clubModeloCtrl', clubModeloCtrl);
var confirmCtrl = ['$state' ,'RootService','$stateParams','$scope', function($state, clubService, $stateParams, scope){
	
	console.log('$stateParams', $stateParams);	


	scope.init = function(){
		scope.code = $stateParams.code;
		if(scope.code){
			getUser();
		}
		
	};

	function getUser(){
		console.log('enter on getUser');
        if(!clubService.getCurrentUser()){
            var request= clubService.sendRequest('get','/verify-user?code='+$stateParams.code);
            request.then( function(response){
                
	            scope.user = response;
                
            }, function(error){
                clubService.addNotification('error getting user', 'error');
            });
        }else{
            $rootScope.currentUser = clubService.getCurrentUser();
        }
	}


	scope.confirmAccount = function(){
		if(scope.user){
			scope.user.active = true;
			var request = clubService.sendRequest('PUT', '/users/'+scope.user.userId+'/activate', scope.user);
			request.then(function(response){
				$state.go('access.signin');
				clubService.addNotification('account activated!', 'success');
			}, function(error){
				clubService.addNotification('error activating your account', 'error');
			});
		}
	};

	scope.init();
}];

angular.module('app')
	.controller('confirmCtrl', confirmCtrl);
// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
    	.module('app')
    	.controller('EditorCtrl', EditorCtrl);

      	function EditorCtrl($scope) {
      	  var vm = $scope;
  		  vm.options = {
            height: 150,
            toolbar: [
              ['style', ['bold', 'italic', 'underline', 'clear']],
              ['color', ['color']],
              ['para', ['ul', 'ol', 'paragraph']],
              ['height', ['height']]
            ]
          };
          vm.text = '<h3>Try me!</h3><p>Super Simple WYSIWYG Editor on Bootstrap</p><p><b>Features:</b></p><ol><li>Worldwide Bootstrap</li><li style="color: blue;">Easy to Install</li><li><strong>Open Source</strong></li><li>Customizing</li><li>Smart Shortcuts</li><li>Works with Firefox, Chrome, and IE9+</li></ol><p><b>Code at GitHub:</b> <a href="https://github.com/summernote/summernote/">Here</a> </p>';
		}
})();

var forgotPasswordCtrl = ['$state','$stateParams','RootService','$scope','$rootScope', function($state, $stateParams, $RootService, scope, $rootScope){
	console.log('forgot it', $stateParams);


	scope.init = function(){
		scope.notifications = $RootService.getNotifications();
		if($stateParams.code){
			scope.getUser();
		}
        scope.bForm = true;
        scope.bConfirmation = false;
	};



	scope.getUser = function(){
  		console.log('enter on getUser');
        if(!$RootService.getCurrentUser()){
            var request= $RootService.sendRequest('get','/verify-user?code='+$stateParams.code);
            request.then( function(response){
                
	            scope.currentUser = response;
                
            }, function(error){
                $RootService.addNotification('error getting user', 'error');
            });
        }else{
            $rootScope.currentUser = $RootService.getCurrentUser();
        }

    };



    scope.change= function(password){
    	
    	console.log('password',password);
    	var request = $RootService.sendRequest('PUT', 'user/'+scope.currentUser.userId+'/reset-password', {password:password});
    	request.then(function(response){
    		console.log(response);
       		$RootService.addNotification('password changed');
    		scope.bForm  = false;
    		scope.bConfirmation = true;
    		
    	}, function(error){
    		$RootService.addNotification('error changing password', 'error');
    	});
    };

    scope.forgotPassword = function(){
        if(scope.email){
            var config = {
                email: scope.email
            };
            var request = $RootService.sendRequest('PUT', '/forgot-password', config);
            request.then( function(response){
                var data ={
                    type: 'emails.forgot',
                    title: 'Forgot password - ClubMeIn.com',
                    user: response
                };
                var secondRequest =  $RootService.sendRequest('POST', '/send-email', data);
                secondRequest.then(function(response){
                    console.log('response emaikl', response);
                    scope.bConfirmation = true;
                    scope.bForm = false;
                }, function(error){
                    $RootService.addNotification('error sending email', 'error');
                });
               
            }, function(error){
                $RootService.addNotification('user not found', 'error');
            });
        }
    };





    scope.init();

}];

angular.module('app')
	.controller('forgotPasswordCtrl', forgotPasswordCtrl);
// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
      .module('app')
      .controller('GoogleMapCtrl', GoogleMap);

      function GoogleMap ($scope) {
        var vm = $scope;
        vm.myMarkers = [];

        vm.mapOptions = {
          center: new google.maps.LatLng(35.784, -98.670),
          zoom: 4,
          mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        vm.addMarker = addMarker;
        vm.setZoomMessage = setZoomMessage;
        vm.openMarkerInfo = openMarkerInfo;
        vm.setMarkerPosition = setMarkerPosition;

        function addMarker($event, $params) {
          vm.myMarkers.push(new google.maps.Marker({
            map: vm.myMap,
            position: $params[0].latLng
          }));
        };

        function setZoomMessage(zoom) {
          vm.zoomMessage = 'You just zoomed to ' + zoom + '!';
        };

        function openMarkerInfo(marker) {
          vm.currentMarker = marker;
          vm.currentMarkerLat = marker.getPosition().lat();
          vm.currentMarkerLng = marker.getPosition().lng();
          vm.myInfoWindow.open(vm.myMap, marker);
        };

        function setMarkerPosition(marker, lat, lng) {
          marker.setPosition(new google.maps.LatLng(lat, lng));
        };
      }


})();

var homeCtrl =  ['$rootScope', '$state', '$scope', 'RootService', function($rootScope, $state, scope,  clubService){
	
	console.log('homeCtrl');
}];


angular.module('app')
	.controller('homeCtrl', homeCtrl);

// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
      .module('app')
      .controller('ImgCropCtrl', ImgCrop);

    function ImgCrop($scope) {
      var vm = $scope;
      vm.myImage='';
      vm.myCroppedImage='';
      vm.cropType="circle";

      var handleFileSelect=function(evt) {
        var file=evt.currentTarget.files[0];
        var reader = new FileReader();
        reader.onload = function (evt) {
          vm.$apply(function(vm){
            vm.myImage=evt.target.result;
          });
        };
        reader.readAsDataURL(file);
      };
      angular.element(document.querySelector('#fileInput')).on('change',handleFileSelect);
    }

})();

var itemsCtrl =  ['$rootScope', '$state', '$scope', 'RootService', 'MembersService', function($rootScope, $state, scope,  clubService, membersService){
	


	function init(){
		scope.items = [];
		scope.countries = null;
		scope.requests = [];

		
		getItems();
		getItemCategories();
	}

	function getItems(){
		if(membersService.getItems()){
			scope.items = membersService.getItems();
		}else{
			var request;
			request = clubService.sendRequest('GET', 'members/items');
			request.then(function(response){
				scope.items = response;
				membersService.setItems(response);
				//console.log('scope.items', scope.items);
				
			}, function(error){
				clubService.addNotification("error getting member's items", 'error');
			});
		}
	}

	scope.haveRequests = function(){
		var booleano = false;
		angular.forEach(scope.items, function(item, key){
			if(!item.active)
				booleano = true;
		});
		return booleano;
	};

	function getItemCategories(){
		if(!membersService.getCategories()){
			var request = clubService.sendRequest('GET', '/categories?bundle=true');
			request.then(function(response){
				console.log('response!', response);
				scope.categories = response;
				scope.categories.push({name: 'Other', code: 'otr'});
				
				membersService.setCategories(scope.categories);
			}, function(error){
				clubService.addNotification('error getting the categories', 'error');
			});
		}else{
			scope.categories = membersService.getCategories();
		}
	}
	scope.addItem = function(){
		var item = {
			categoryId: 0, 
			productId: 0, 
			brandId: 0, 
			modelId: 0, 
			category_name: null, 
			product_name: null, 
			brand_name: null, 
			model_name: null, 
			quantity: 1, 
			price: 0, 
			description: "", 
			active: false
		};

		membersService.addItems(item);
		scope.items = membersService.getItems();
		//console.log('scope.items', scope.items);
	};

	init();
}];


angular.module('app')
	.controller('itemsCtrl', itemsCtrl);

var LimboCtrl = ['$rootScope','$scope','RootService','$mdDialog','$auth','$state','$mdMedia', function($rootScope, scope, RootService, $mdDialog, $auth, $state, $mdMedia){
	var vm = this;
        
    vm.user = null;
    vm.error = null ;

    vm.getUser = function() {
        // This request will hit the index method in the AuthenticateController
        // on the Laravel side and will return the list of users
        var request= RootService.sendRequest('get','/session/user');
        request.then( function(response){
            if(!response.access_level){
            	$rootScope.limboUser = response;
                $state.go('access.select-user');
            }else{
                $rootScope.currentUser = response;
                console.log('rootscope.currentUser', $rootScope.currentUser);
                $state.go('app.home');
            }
        }, function(error){
            vm.error= error;
        });
    };
    //hello 
    vm.getUser();



	scope.setUserType = function (type){
		console.log('type', type);
	};

    scope.isEmployee = function(){
        if($rootScope.limboUser.email.match('@clubmein.com')){
            return true;
        }else{
            return false;
        }
    };



    scope.showAdvanced = function(ev, code, type) {
        $rootScope.limboUser.code = code;
        var useFullScreen = ($mdMedia('sm') || $mdMedia('xs'))  && scope.customFullscreen;
        $mdDialog.show({
          controller: limboLocationCtrl,
          templateUrl: 'views/partials/complete-user-location.html',
          parent: angular.element(document.body),
          targetEvent: ev,
          clickOutsideToClose:true,
          fullscreen: useFullScreen
        })
        .then(function(answer) {
          scope.status = 'You said the information was "' + answer + '".';
        }, function() {
          scope.status = 'You cancelled the dialog.';
        });
        scope.$watch(function() {
          return $mdMedia('xs') || $mdMedia('sm');
        }, function(wantsFullScreen) {
          scope.customFullscreen = (wantsFullScreen === true);
        });
    };
}];

angular.module('app').controller('LimboCtrl', LimboCtrl);
var limboLocationCtrl = ['$rootScope','$scope','RootService','$mdDialog','$auth','$state','$mdMedia', function($rootScope, scope, RootService, $mdDialog, $auth, $state, $mdMedia){

	console.log('location!', $rootScope.limboUser);
	scope.country;
	scope.state;
	scope.city;
	scope.limboUser = $rootScope.limboUser;
	scope.cancel = function(){
		$mdDialog.hide();
	};

	scope.getUser = function() {
        // This request will hit the index method in the AuthenticateController
        // on the Laravel side and will return the list of users
        var request= RootService.sendRequest('get','/session/user');
        request.then( function(response){
            if(!response.access_level){
            	$rootScope.limboUser = response;
                $state.go('access.select-user');
            }else{
                $rootScope.currentUser = response;
                console.log('rootscope.currentUser', $rootScope.currentUser);
                $state.go('app.home');
            }
        }, function(error){
            vm.error= error;
        });
    };

	scope.save = function(){
		scope.bSave = false;
		console.log('enter on save', scope.country, scope.state, scope.city, scope.limboUser);
		if($rootScope.limboUser.code === 'ven' && scope.country && scope.state && scope.city && scope.limboUser.title && scope.limboUser.telephone && scope.limboUser.address && scope.limboUser.zip_code && scope.limboUser.website){

			if(scope.limboUser.address_second_line)	
				scope.limboUser.address += scope.limboUser.address_second_line;

			scope.bSave = true;
		}

		if($rootScope.limboUser.code === 'mem' && scope.country && scope.state && scope.city){
			scope.bSave = true;
		}
		if($rootScope.limboUser.email.match('@clubmein.com') && $rootScope.limboUser.code === "emp"){
			scope.bSave = true;
		}
		if(scope.bSave){
			var location = {
				country: scope.country, 
				state: scope.state, 
				city: scope.city
			};
			console.log('location ', location);
			console.log('limbo useer', scope.limboUser);


			var request = RootService.sendRequest('POST', '/user/location', location);

			request.then(function(response){
				console.log('location added to this user!', response);
				var otherRequest = RootService.sendRequest('PUT', '/users/'+scope.limboUser.userId, scope.limboUser);
					otherRequest.then(function(response){
						console.log('response', response);
						$mdDialog.hide();
    					scope.getUser();
					}, function(error){
						RootService.addNotification('error saving the user', 'error');
					});
			}, function(error){
				RootService.addNotification('error saving your location', 'error');
			});
		}
		
	};

	scope.setCountry = function(country){
		scope.country = country;
	};
	scope.setState = function(state){
		scope.state = state;
	};
	scope.setCity = function(city){
		scope.city = city;
	};




}];


angular.module('app')
	.controller('limboLocationCtrl', limboLocationCtrl);
/*!
 * JavaScript - loadGoogleMaps( version, apiKey, language )
 *
 * - Load Google Maps API using jQuery Deferred. 
 *   Useful if you want to only load the Google Maps API on-demand.
 * - Requires jQuery 1.5
 * 
 * Copyright (c) 2011 Glenn Baker
 * Dual licensed under the MIT and GPL licenses.
 */
/*globals window, google, jQuery*/
var loadGoogleMaps = (function($) {
	
	var now = $.now(),
	
		promise;
	
	return function( version, apiKey, language ) {
		
		if( promise ) { return promise; }
		
			//Create a Deferred Object
		var	deferred = $.Deferred(),
		
			//Declare a resolve function, pass google.maps for the done functions
			resolve = function () {
				deferred.resolve( window.google && google.maps ? google.maps : false );
			},
			
			//global callback name
			callbackName = "loadGoogleMaps_" + ( now++ ),
			
			// Default Parameters
			params = $.extend(
			 {'sensor': false}
			 , apiKey ? {"key": apiKey} : {}
			 , language ? {"language": language} : {} 
			);;
		
		//If google.maps exists, then Google Maps API was probably loaded with the <script> tag
		if( window.google && google.maps ) {
			
			resolve();
		
		//If the google.load method exists, lets load the Google Maps API in Async.
		} else if ( window.google && google.load ) {
		
			google.load("maps", version || 3, {"other_params": $.param(params) , "callback" : resolve});

		//Last, try pure jQuery Ajax technique to load the Google Maps API in Async.
		} else {
			
			//Ajax URL params
			params = $.extend( params, {
				'v': version || 3,
				'callback': callbackName
			});
			
			//Declare the global callback
			window[callbackName] = function( ) {
				
				resolve();
				
				//Delete callback
				setTimeout(function() {
					try{
						delete window[callbackName];
					} catch( e ) {}
				}, 20);
			};
			
			//Can't use the jXHR promise because 'script' doesn't support 'callback=?'
			$.ajax({
				dataType: 'script',
				data: params,
				url: 'http://maps.google.com/maps/api/js'				
			});
			
		}
	
		promise = deferred.promise(); 
		
		return promise;
	};
	
}(jQuery));

var MainController = ['$auth', '$rootScope','$state','RootService','$scope', function ( $auth, $rootScope, $state, $RootService, scope) {
	var vm = this;
        
    vm.user = null;
    vm.error = null;
    scope.notifications = $RootService.getNotifications();
    vm.getUser = function() {

        // This request will hit the index method in the AuthenticateController
        // on the Laravel side and will return the list of users
        console.log('service user', $RootService.getCurrentUser());
        if(!$RootService.getCurrentUser()){
            var request= $RootService.sendRequest('get','/session/user');
            request.then( function(response){
                if(!response.access_level){
                    $state.go('access.select-user');
                }else{
                    $rootScope.currentUser = response;
                    $RootService.setCurrentUser(response);
                    console.log('$r',$RootService.getCurrentUser());
                }
            }, function(error){
                vm.error= error;
            });
        }else{
            $rootScope.currentUser = $RootService.getCurrentUser();
        }

    };
    
    vm.getUser();

    scope.logout = function() {

        $auth.logout().then(function() {
            // Flip authenticated to false so that we no longer
            // show UI elements dependant on the user being logged in
            $rootScope.authenticated = false;

            // Remove the current user info from rootscope
            $rootScope.currentUser = null;
            $RootService.setCurrentUser(null);
            $RootService.setNotifications(null);

            $state.go('access.signin');

        });
    };


    




}];


angular.module('app')
    .controller('MainController', MainController);

    //searchCtrl
    //itemsCtrl
    //nearByCtrl
var membersListCtrl = ['$state', '$scope', function($state, scope){
		console.log('membersListCtrl' );
}];


angular.module('app')
	.controller('membersListCtrl', membersListCtrl);
var myBidsCtrl = ['$rootScope', '$state', '$scope', 'RootService','vendorService', function($rootScope, $state, scope,  clubService, vendorService){

	scope.init = function(){
		scope.bids = [];
		getBids();

	};



	function getBids(){
		var request = clubService.sendRequest('GET', '/vendor/bids');
		request.then(function(response){
			scope.bids = response;
			console.log('my bids', scope.bids);
		}, function(error){
			clubService.addNotification('error getting your bids', 'error');
		});
	}




	scope.init();

}];

angular.module('app')
	.controller('myBidsCtrl', myBidsCtrl);



var myProductsCtrl = ['$rootScope', '$state', '$scope', 'RootService','vendorService', function($rootScope, $state, scope,  clubService, vendorService){


	scope.init = function(){

		scope.myProducts = null;
		console.log($rootScope.currentUser);
		getItemCategories();
		scope.user = $rootScope.currentUSer;
		
		scope.getMyProducts();
			
	};

	function getItemCategories(){
		if(!clubService.getCategories()){
			var request = clubService.sendRequest('GET', '/categories?bundle=true');
			request.then(function(response){
				console.log('categories!', response);
				scope.categories = response;
				scope.categories.push({name: 'Other', code: 'otr'});
				clubService.setCategories(scope.categories);
			}, function(error){
				clubService.addNotification('error getting the categories', 'error');
			});
		}else{
			scope.categories = clubService.getCategories();
		}
	}

	scope.getMyProducts = function(){
		if(!vendorService.getProducts()){
			var request = clubService.sendRequest('GET', '/vendor/products');
			request.then(function(response){
				console.log('my products ',response)
				scope.myProducts = response;
				vendorService.setProducts(response);
			}, function(error){
				clubService.addNotification('error getting your products', 'error');
			});
		}else{
			scope.myProducts = vendorService.getProducts();
		}

	};


scope.addProduct = function(){
		var product = {
			categoryId: 0, 
			productId: 0, 
			brandId: 0, 
			modelId: 0, 
			category_name: null, 
			product_name: null, 
			brand_name: null, 
			model_name: null, 
			active: false
		};
		vendorService.addProduct(product);
		scope.myProducts = vendorService.getProducts();
	};


	scope.init();


}];

angular.module('app')
	.controller('myProductsCtrl', myProductsCtrl);
var nearByCtrl =  ['$rootScope', '$state', '$scope', 'RootService','MembersService', function($rootScope, $state, scope,  clubService, MembersService){
	
	
	scope.init = function(){
		scope.items = [];
		scope.categories = [];
		scope.clubs = [];
		getCategories();
		getNearByItems();
	};

	function getCategories(){
		if(MembersService.getCategories()){
			scope.categories = MembersService.getCategories();
		}else{
			var request =clubService.sendRequest('GET', '/categories');
			request.then(function(response){
				scope.categories = response;
				MembersService.setCategories(response);
				//console.log('categories!', scope.categories);
			}, function(error){	
				clubService.addNotification('error getting categories', error);
			});
		}
	}


	function getNearByItems(){
		var request = clubService.sendRequest('GET', 'near');

		request.then(function(response){
			setFinalItems(response);
			console.log('got the items');
		}, function(error){
			clubService.addNotification('error getting nearBy items', 'error');
		});
	}


	function setFinalItems(nearBy){
		angular.forEach(nearBy, function(near, key){
			if(near.item){
				scope.items.push(near.item);
			}
		});
		scope.setCategoryItems(scope.items);
	}

	scope.setCategoryItems= function(items){
		angular.forEach(scope.categories, function(category, key){
			category.items = [];
			angular.forEach(items, function(item, key){
				if(category.categoryId === item.categoryId){
					category.items.push(item);
					console.log('found!' );
				}
			});
		});
		MembersService.setCategories(scope.categories);
		scope.clubs = [];
		angular.forEach(scope.categories, function(category, key){
			if(category.items.length)
				scope.clubs.push(category);
		});
		console.log('clubs!', scope.clubs);

	}


	scope.goToClub = function(club){
		console.log('you clicked on ', club);
		MembersService.setClub(club);
		$state.go('app.club');

	};

	scope.init();







}];


angular.module('app')
	.controller('nearByCtrl', nearByCtrl);

// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
        .module('app')
        .controller('NGGridCtrl', NGGridCtrl);

        NGGridCtrl.$inject = ['$scope', '$http']; 
        function NGGridCtrl($scope, $http) {
            var vm = $scope;
            vm.filterOptions = {
                filterText: "",
                useExternalFilter: true
            }; 
            vm.totalServerItems = 0;
            vm.pagingOptions = {
                pageSizes: [250, 500, 1000],
                pageSize: 250,
                currentPage: 1
            };
            vm.setPagingData = setPagingData;
            vm.getPagedDataAsync = getPagedDataAsync;

            vm.getPagedDataAsync(vm.pagingOptions.pageSize, vm.pagingOptions.currentPage);

            vm.gridOptions = {
                data: 'myData',
                enablePaging: true,
                showFooter: true,
                rowHeight: 36,
                headerRowHeight: 36,
                totalServerItems: 'totalServerItems',
                pagingOptions: vm.pagingOptions,
                filterOptions: vm.filterOptions
            };

            vm.$watch('pagingOptions', function (newVal, oldVal) {
                if (newVal !== oldVal && newVal.currentPage !== oldVal.currentPage) {
                  vm.getPagedDataAsync(vm.pagingOptions.pageSize, vm.pagingOptions.currentPage, vm.filterOptions.filterText);
                }
            }, true);
            vm.$watch('filterOptions', function (newVal, oldVal) {
                if (newVal !== oldVal) {
                  vm.getPagedDataAsync(vm.pagingOptions.pageSize, vm.pagingOptions.currentPage, vm.filterOptions.filterText);
                }
            }, true);

            function setPagingData(data, page, pageSize){  
                var pagedData = data.slice((page - 1) * pageSize, page * pageSize);
                vm.myData = pagedData;
                vm.totalServerItems = data.length;
                if (!vm.$$phase) {
                    vm.$apply();
                }
            };
            
            function getPagedDataAsync(pageSize, page, searchText) {
                setTimeout(function () {
                    var data;
                    if (searchText) {
                        var ft = searchText.toLowerCase();
                        $http.get('scripts/controllers/largeLoad.json').success(function (largeLoad) {    
                            data = largeLoad.filter(function(item) {
                                return JSON.stringify(item).toLowerCase().indexOf(ft) != -1;
                            });
                            vm.setPagingData(data,page,pageSize);
                        });            
                    } else {
                        $http.get('scripts/controllers/largeLoad.json').success(function (largeLoad) {
                            vm.setPagingData(largeLoad,page,pageSize);
                        });
                    }
                }, 100);
            };
        }
})();

var searchCtrl =  ['$rootScope', '$state', '$scope', 'RootService', function($rootScope, $state, scope,  clubService){
	
	console.log('searchCtrl');
}];


angular.module('app')
	.controller('searchCtrl', searchCtrl);

// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
        .module('app')
        .filter('propsFilter', propsFilter)
        .controller('SelectCtrl', SelectCtrl);

        function propsFilter() {
            return filter;
            function filter(items, props) {
                var out = [];

                if (angular.isArray(items)) {
                  items.forEach(function(item) {
                    var itemMatches = false;

                    var keys = Object.keys(props);
                    for (var i = 0; i < keys.length; i++) {
                      var prop = keys[i];
                      var text = props[prop].toLowerCase();
                      if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                        itemMatches = true;
                        break;
                      }
                    }

                    if (itemMatches) {
                      out.push(item);
                    }
                  });
                } else {
                  // Let the output be the input untouched
                  out = items;
                }

                return out;
            };
        }

        SelectCtrl.$inject = ['$scope', '$http', '$timeout'];
        function SelectCtrl($scope, $http, $timeout) {
            var vm = $scope;
            vm.disabled = undefined;
            vm.searchEnabled = undefined;

            vm.enable = function() {
                vm.disabled = false;
            };

            vm.disable = function() {
                vm.disabled = true;
            };

            vm.enableSearch = function() {
                vm.searchEnabled = true;
            }

            vm.disableSearch = function() {
                vm.searchEnabled = false;
            }

            vm.clear = function() {
                vm.person.selected = undefined;
                vm.address.selected = undefined;
                vm.country.selected = undefined;
            };

            vm.someGroupFn = function (item){
                if (item.name[0] >= 'A' && item.name[0] <= 'M')
                    return 'From A - M';

                if (item.name[0] >= 'N' && item.name[0] <= 'Z')
                    return 'From N - Z';
            };

            vm.personAsync = {selected : "wladimir@email.com"};
            vm.peopleAsync = [];

            $timeout(function(){
                vm.peopleAsync = [
                    { name: 'Adam',      email: 'adam@email.com',      age: 12, country: 'United States' },
                    { name: 'Amalie',    email: 'amalie@email.com',    age: 12, country: 'Argentina' },
                    { name: 'Estefanía', email: 'estefania@email.com', age: 21, country: 'Argentina' },
                    { name: 'Adrian',    email: 'adrian@email.com',    age: 21, country: 'Ecuador' },
                    { name: 'Wladimir',  email: 'wladimir@email.com',  age: 30, country: 'Ecuador' },
                    { name: 'Samantha',  email: 'samantha@email.com',  age: 30, country: 'United States' },
                    { name: 'Nicole',    email: 'nicole@email.com',    age: 43, country: 'Colombia' },
                    { name: 'Natasha',   email: 'natasha@email.com',   age: 54, country: 'Ecuador' },
                    { name: 'Michael',   email: 'michael@email.com',   age: 15, country: 'Colombia' },
                    { name: 'Nicolás',   email: 'nicole@email.com',    age: 43, country: 'Colombia' }
                  ];
            },3000);

            vm.counter = 0;
            vm.someFunction = function (item, model){
                vm.counter++;
                vm.eventResult = {item: item, model: model};
            };

            vm.removed = function (item, model) {
                vm.lastRemoved = {
                    item: item,
                    model: model
                };
            };

            vm.person = {};
            vm.people = [
                { name: 'Adam',      email: 'adam@email.com',      age: 12, country: 'United States' },
                { name: 'Amalie',    email: 'amalie@email.com',    age: 12, country: 'Argentina' },
                { name: 'Estefanía', email: 'estefania@email.com', age: 21, country: 'Argentina' },
                { name: 'Adrian',    email: 'adrian@email.com',    age: 21, country: 'Ecuador' },
                { name: 'Wladimir',  email: 'wladimir@email.com',  age: 30, country: 'Ecuador' },
                { name: 'Samantha',  email: 'samantha@email.com',  age: 30, country: 'United States' },
                { name: 'Nicole',    email: 'nicole@email.com',    age: 43, country: 'Colombia' },
                { name: 'Natasha',   email: 'natasha@email.com',   age: 54, country: 'Ecuador' },
                { name: 'Michael',   email: 'michael@email.com',   age: 15, country: 'Colombia' },
                { name: 'Nicolás',   email: 'nicolas@email.com',    age: 43, country: 'Colombia' }
            ];

            vm.availableColors = ['Red','Green','Blue','Yellow','Magenta','Maroon','Umbra','Turquoise'];

            vm.multipleDemo = {};
            vm.multipleDemo.colors = ['Blue','Red'];
            vm.multipleDemo.selectedPeople = [vm.people[5], vm.people[4]];
            vm.multipleDemo.selectedPeopleWithGroupBy = [vm.people[8], vm.people[6]];
            vm.multipleDemo.selectedPeopleSimple = ['samantha@email.com','wladimir@email.com'];


            vm.address = {};
            vm.refreshAddresses = function(address) {
                var params = {address: address, sensor: false};
                return $http.get(
                  'http://maps.googleapis.com/maps/api/geocode/json',
                  {params: params}
                ).then(function(response) {
                  vm.addresses = response.data.results;
                });
            };

            vm.country = {};
            vm.countries = [ // Taken from https://gist.github.com/unceus/6501985
                {name: 'Afghanistan', code: 'AF'},
                {name: 'Åland Islands', code: 'AX'},
                {name: 'Albania', code: 'AL'},
                {name: 'Algeria', code: 'DZ'},
                {name: 'American Samoa', code: 'AS'},
                {name: 'Andorra', code: 'AD'},
                {name: 'Angola', code: 'AO'},
                {name: 'Anguilla', code: 'AI'},
                {name: 'Antarctica', code: 'AQ'},
                {name: 'Antigua and Barbuda', code: 'AG'},
                {name: 'Argentina', code: 'AR'},
                {name: 'Armenia', code: 'AM'},
                {name: 'Aruba', code: 'AW'},
                {name: 'Australia', code: 'AU'},
                {name: 'Austria', code: 'AT'},
                {name: 'Azerbaijan', code: 'AZ'},
                {name: 'Bahamas', code: 'BS'},
                {name: 'Bahrain', code: 'BH'},
                {name: 'Bangladesh', code: 'BD'},
                {name: 'Barbados', code: 'BB'},
                {name: 'Belarus', code: 'BY'},
                {name: 'Belgium', code: 'BE'},
                {name: 'Belize', code: 'BZ'},
                {name: 'Benin', code: 'BJ'},
                {name: 'Bermuda', code: 'BM'},
                {name: 'Bhutan', code: 'BT'},
                {name: 'Bolivia', code: 'BO'},
                {name: 'Bosnia and Herzegovina', code: 'BA'},
                {name: 'Botswana', code: 'BW'},
                {name: 'Bouvet Island', code: 'BV'},
                {name: 'Brazil', code: 'BR'},
                {name: 'British Indian Ocean Territory', code: 'IO'},
                {name: 'Brunei Darussalam', code: 'BN'},
                {name: 'Bulgaria', code: 'BG'},
                {name: 'Burkina Faso', code: 'BF'},
                {name: 'Burundi', code: 'BI'},
                {name: 'Cambodia', code: 'KH'},
                {name: 'Cameroon', code: 'CM'},
                {name: 'Canada', code: 'CA'},
                {name: 'Cape Verde', code: 'CV'},
                {name: 'Cayman Islands', code: 'KY'},
                {name: 'Central African Republic', code: 'CF'},
                {name: 'Chad', code: 'TD'},
                {name: 'Chile', code: 'CL'},
                {name: 'China', code: 'CN'},
                {name: 'Christmas Island', code: 'CX'},
                {name: 'Cocos (Keeling) Islands', code: 'CC'},
                {name: 'Colombia', code: 'CO'},
                {name: 'Comoros', code: 'KM'},
                {name: 'Congo', code: 'CG'},
                {name: 'Congo, The Democratic Republic of the', code: 'CD'},
                {name: 'Cook Islands', code: 'CK'},
                {name: 'Costa Rica', code: 'CR'},
                {name: 'Cote D\'Ivoire', code: 'CI'},
                {name: 'Croatia', code: 'HR'},
                {name: 'Cuba', code: 'CU'},
                {name: 'Cyprus', code: 'CY'},
                {name: 'Czech Republic', code: 'CZ'},
                {name: 'Denmark', code: 'DK'},
                {name: 'Djibouti', code: 'DJ'},
                {name: 'Dominica', code: 'DM'},
                {name: 'Dominican Republic', code: 'DO'},
                {name: 'Ecuador', code: 'EC'},
                {name: 'Egypt', code: 'EG'},
                {name: 'El Salvador', code: 'SV'},
                {name: 'Equatorial Guinea', code: 'GQ'},
                {name: 'Eritrea', code: 'ER'},
                {name: 'Estonia', code: 'EE'},
                {name: 'Ethiopia', code: 'ET'},
                {name: 'Falkland Islands (Malvinas)', code: 'FK'},
                {name: 'Faroe Islands', code: 'FO'},
                {name: 'Fiji', code: 'FJ'},
                {name: 'Finland', code: 'FI'},
                {name: 'France', code: 'FR'},
                {name: 'French Guiana', code: 'GF'},
                {name: 'French Polynesia', code: 'PF'},
                {name: 'French Southern Territories', code: 'TF'},
                {name: 'Gabon', code: 'GA'},
                {name: 'Gambia', code: 'GM'},
                {name: 'Georgia', code: 'GE'},
                {name: 'Germany', code: 'DE'},
                {name: 'Ghana', code: 'GH'},
                {name: 'Gibraltar', code: 'GI'},
                {name: 'Greece', code: 'GR'},
                {name: 'Greenland', code: 'GL'},
                {name: 'Grenada', code: 'GD'},
                {name: 'Guadeloupe', code: 'GP'},
                {name: 'Guam', code: 'GU'},
                {name: 'Guatemala', code: 'GT'},
                {name: 'Guernsey', code: 'GG'},
                {name: 'Guinea', code: 'GN'},
                {name: 'Guinea-Bissau', code: 'GW'},
                {name: 'Guyana', code: 'GY'},
                {name: 'Haiti', code: 'HT'},
                {name: 'Heard Island and Mcdonald Islands', code: 'HM'},
                {name: 'Holy See (Vatican City State)', code: 'VA'},
                {name: 'Honduras', code: 'HN'},
                {name: 'Hong Kong', code: 'HK'},
                {name: 'Hungary', code: 'HU'},
                {name: 'Iceland', code: 'IS'},
                {name: 'India', code: 'IN'},
                {name: 'Indonesia', code: 'ID'},
                {name: 'Iran, Islamic Republic Of', code: 'IR'},
                {name: 'Iraq', code: 'IQ'},
                {name: 'Ireland', code: 'IE'},
                {name: 'Isle of Man', code: 'IM'},
                {name: 'Israel', code: 'IL'},
                {name: 'Italy', code: 'IT'},
                {name: 'Jamaica', code: 'JM'},
                {name: 'Japan', code: 'JP'},
                {name: 'Jersey', code: 'JE'},
                {name: 'Jordan', code: 'JO'},
                {name: 'Kazakhstan', code: 'KZ'},
                {name: 'Kenya', code: 'KE'},
                {name: 'Kiribati', code: 'KI'},
                {name: 'Korea, Democratic People\'s Republic of', code: 'KP'},
                {name: 'Korea, Republic of', code: 'KR'},
                {name: 'Kuwait', code: 'KW'},
                {name: 'Kyrgyzstan', code: 'KG'},
                {name: 'Lao People\'s Democratic Republic', code: 'LA'},
                {name: 'Latvia', code: 'LV'},
                {name: 'Lebanon', code: 'LB'},
                {name: 'Lesotho', code: 'LS'},
                {name: 'Liberia', code: 'LR'},
                {name: 'Libyan Arab Jamahiriya', code: 'LY'},
                {name: 'Liechtenstein', code: 'LI'},
                {name: 'Lithuania', code: 'LT'},
                {name: 'Luxembourg', code: 'LU'},
                {name: 'Macao', code: 'MO'},
                {name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK'},
                {name: 'Madagascar', code: 'MG'},
                {name: 'Malawi', code: 'MW'},
                {name: 'Malaysia', code: 'MY'},
                {name: 'Maldives', code: 'MV'},
                {name: 'Mali', code: 'ML'},
                {name: 'Malta', code: 'MT'},
                {name: 'Marshall Islands', code: 'MH'},
                {name: 'Martinique', code: 'MQ'},
                {name: 'Mauritania', code: 'MR'},
                {name: 'Mauritius', code: 'MU'},
                {name: 'Mayotte', code: 'YT'},
                {name: 'Mexico', code: 'MX'},
                {name: 'Micronesia, Federated States of', code: 'FM'},
                {name: 'Moldova, Republic of', code: 'MD'},
                {name: 'Monaco', code: 'MC'},
                {name: 'Mongolia', code: 'MN'},
                {name: 'Montserrat', code: 'MS'},
                {name: 'Morocco', code: 'MA'},
                {name: 'Mozambique', code: 'MZ'},
                {name: 'Myanmar', code: 'MM'},
                {name: 'Namibia', code: 'NA'},
                {name: 'Nauru', code: 'NR'},
                {name: 'Nepal', code: 'NP'},
                {name: 'Netherlands', code: 'NL'},
                {name: 'Netherlands Antilles', code: 'AN'},
                {name: 'New Caledonia', code: 'NC'},
                {name: 'New Zealand', code: 'NZ'},
                {name: 'Nicaragua', code: 'NI'},
                {name: 'Niger', code: 'NE'},
                {name: 'Nigeria', code: 'NG'},
                {name: 'Niue', code: 'NU'},
                {name: 'Norfolk Island', code: 'NF'},
                {name: 'Northern Mariana Islands', code: 'MP'},
                {name: 'Norway', code: 'NO'},
                {name: 'Oman', code: 'OM'},
                {name: 'Pakistan', code: 'PK'},
                {name: 'Palau', code: 'PW'},
                {name: 'Palestinian Territory, Occupied', code: 'PS'},
                {name: 'Panama', code: 'PA'},
                {name: 'Papua New Guinea', code: 'PG'},
                {name: 'Paraguay', code: 'PY'},
                {name: 'Peru', code: 'PE'},
                {name: 'Philippines', code: 'PH'},
                {name: 'Pitcairn', code: 'PN'},
                {name: 'Poland', code: 'PL'},
                {name: 'Portugal', code: 'PT'},
                {name: 'Puerto Rico', code: 'PR'},
                {name: 'Qatar', code: 'QA'},
                {name: 'Reunion', code: 'RE'},
                {name: 'Romania', code: 'RO'},
                {name: 'Russian Federation', code: 'RU'},
                {name: 'Rwanda', code: 'RW'},
                {name: 'Saint Helena', code: 'SH'},
                {name: 'Saint Kitts and Nevis', code: 'KN'},
                {name: 'Saint Lucia', code: 'LC'},
                {name: 'Saint Pierre and Miquelon', code: 'PM'},
                {name: 'Saint Vincent and the Grenadines', code: 'VC'},
                {name: 'Samoa', code: 'WS'},
                {name: 'San Marino', code: 'SM'},
                {name: 'Sao Tome and Principe', code: 'ST'},
                {name: 'Saudi Arabia', code: 'SA'},
                {name: 'Senegal', code: 'SN'},
                {name: 'Serbia and Montenegro', code: 'CS'},
                {name: 'Seychelles', code: 'SC'},
                {name: 'Sierra Leone', code: 'SL'},
                {name: 'Singapore', code: 'SG'},
                {name: 'Slovakia', code: 'SK'},
                {name: 'Slovenia', code: 'SI'},
                {name: 'Solomon Islands', code: 'SB'},
                {name: 'Somalia', code: 'SO'},
                {name: 'South Africa', code: 'ZA'},
                {name: 'South Georgia and the South Sandwich Islands', code: 'GS'},
                {name: 'Spain', code: 'ES'},
                {name: 'Sri Lanka', code: 'LK'},
                {name: 'Sudan', code: 'SD'},
                {name: 'Suriname', code: 'SR'},
                {name: 'Svalbard and Jan Mayen', code: 'SJ'},
                {name: 'Swaziland', code: 'SZ'},
                {name: 'Sweden', code: 'SE'},
                {name: 'Switzerland', code: 'CH'},
                {name: 'Syrian Arab Republic', code: 'SY'},
                {name: 'Taiwan, Province of China', code: 'TW'},
                {name: 'Tajikistan', code: 'TJ'},
                {name: 'Tanzania, United Republic of', code: 'TZ'},
                {name: 'Thailand', code: 'TH'},
                {name: 'Timor-Leste', code: 'TL'},
                {name: 'Togo', code: 'TG'},
                {name: 'Tokelau', code: 'TK'},
                {name: 'Tonga', code: 'TO'},
                {name: 'Trinidad and Tobago', code: 'TT'},
                {name: 'Tunisia', code: 'TN'},
                {name: 'Turkey', code: 'TR'},
                {name: 'Turkmenistan', code: 'TM'},
                {name: 'Turks and Caicos Islands', code: 'TC'},
                {name: 'Tuvalu', code: 'TV'},
                {name: 'Uganda', code: 'UG'},
                {name: 'Ukraine', code: 'UA'},
                {name: 'United Arab Emirates', code: 'AE'},
                {name: 'United Kingdom', code: 'GB'},
                {name: 'United States', code: 'US'},
                {name: 'United States Minor Outlying Islands', code: 'UM'},
                {name: 'Uruguay', code: 'UY'},
                {name: 'Uzbekistan', code: 'UZ'},
                {name: 'Vanuatu', code: 'VU'},
                {name: 'Venezuela', code: 'VE'},
                {name: 'Vietnam', code: 'VN'},
                {name: 'Virgin Islands, British', code: 'VG'},
                {name: 'Virgin Islands, U.S.', code: 'VI'},
                {name: 'Wallis and Futuna', code: 'WF'},
                {name: 'Western Sahara', code: 'EH'},
                {name: 'Yemen', code: 'YE'},
                {name: 'Zambia', code: 'ZM'},
                {name: 'Zimbabwe', code: 'ZW'}
            ];
        }
})();

var SettingsCtrl = ['$rootScope','$scope','RootService', function($rootScope, scope , clubService){
	console.log('settingsCtrl', $rootScope.currentUser);

	scope.init = function(){
		scope.bEditLocation = false;
	};

	scope.editLocation = function(){
		scope.safeLocation = angular.copy($rootScope.currentUser.location);
		scope.bEditLocation = true;
	};

	scope.cancel = function (){
		scope.bEditLocation = false;
		$rootScope.currentUser.location = angular.copy(scope.safeLocation);
	};

	scope.update = function(){
		console.log('currentUser', $rootScope.currentUser);
		$rootScope.currentUser.name = $rootScope.currentUser.firstName + " " + $rootScope.currentUser.lastName;
		if($rootScope.currentUser.memberId){
			var request = clubService.sendRequest('PUT', '/member/'+$rootScope.currentUser.memberId, $rootScope.currentUser);
		}
		if($rootScope.currentUser.vendorId){
			var request = clubService.sendRequest('PUT', '/vendor/'+$rootScope.currentUser.vendorId, $rootScope.currentUser);
		}
		request.then(function(response){
			console.log('response', response);
			$rootScope.currentUser.firstName = response.firstName;
			$rootScope.currentUser.lastName = response.lastName;
			clubService.addNotification('profile updated', 'success');

		}, function(error){
			clubService.addNotification('error updating profile', 'error');
		})
	};

	scope.updateLocation = function(){
		console.log('updating location ', $rootScope.currentUser.location);
		var request;
		if($rootScope.currentUser.location && $rootScope.currentUser.location.userLocationId && $rootScope.currentUser.location.country && $rootScope.currentUser.location.state && $rootScope.currentUser.location.city){
			request = clubService.sendRequest('PUT', '/user/location', $rootScope.currentUser.location);
			request.then(function(response){
				$rootScope.currentUser.location = response;
				clubService.addNotification('location updated successfully', 'success');
				scope.bEditLocation = false;
			}, function(error){
				clubService.addNotification('error updating your location', 'error');
			});
		}else if($rootScope.currentUser.location && !$rootScope.currentUser.location.userLocationId && $rootScope.currentUser.location.country && $rootScope.currentUser.location.state && $rootScope.currentUser.location.city){	

			request = clubService.sendRequest('POST', 'user/location', $rootScope.currentUser.location);
			request.then(function(response){
				console.log('response::', response);
				$rootScope.currentUser.location = response;
				clubService.addNotification('location updated successfully', 'success');
				scope.bEditLocation = false;
			}, function(error){
				clubService.addNotification('error updating your location', 'error');
			});
		}

	};



	scope.updatePassword = function(){
		
		if(scope.oldPassword &&  scope.newPassword && scope.repeatPassword){
			var data={
				old: scope.oldPassword,
				new: scope.newPassword
			};
			var request = clubService.sendRequest('PUT', '/change-password', data);
			request.then(function(response){
				console.log('response', response);
				clubService.addNotification('password changed!', 'success');
			}, function(error){
				clubService.addNotification('error changing your password', 'error');
			});
		}
	};

	



	scope.init();

}];


angular.module('app')
	.controller('SettingsCtrl', SettingsCtrl);
// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
        .module('app')
        .controller('SliderCtrl', SliderCtrl);

        function SliderCtrl($scope) {
        	var vm = $scope;
			vm.cost = 40;
			vm.range = {
				min: 30,
				max: 60
			};
			vm.currencyFormatting = currencyFormatting;

			function currencyFormatting(value) { 
				return "$"+value.toString();
			}
		}
})();

// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
        .module('app')
        .controller('TableCtrl', TableCtrl);

        TableCtrl.$inject =  ['$scope', '$timeout'];

        function TableCtrl($scope, $timeout) {
          var vm = $scope;

          vm.rowCollectionBasic = [
              {firstName: 'Laurent', lastName: 'Renard', birthDate: new Date('1987-05-21'), balance: 102, email: 'whatever@gmail.com'},
              {firstName: 'Blandine', lastName: 'Faivre', birthDate: new Date('1987-04-25'), balance: -2323.22, email: 'oufblandou@gmail.com'},
              {firstName: 'Francoise', lastName: 'Frere', birthDate: new Date('1955-08-27'), balance: 42343, email: 'raymondef@gmail.com'}
          ];

          vm.removeRow = removeRow;

          vm.predicates = ['firstName', 'lastName', 'birthDate', 'balance', 'email'];
          vm.selectedPredicate = vm.predicates[0];

          var firstnames = ['Laurent', 'Blandine', 'Olivier', 'Max'];
          var lastnames = ['Renard', 'Faivre', 'Frere', 'Eponge'];
          var dates = ['1987-05-21', '1987-04-25', '1955-08-27', '1966-06-06'];
          var id = 1;

          vm.rowCollection = [];

          for (id; id < 5; id++) {
              vm.rowCollection.push(generateRandomItem(id));
          }

          //copy the references (you could clone ie angular.copy but then have to go through a dirty checking for the matches)
          vm.displayedCollection = [].concat(vm.rowCollection);

          //add to the real data holder
          vm.addRandomItem = addRandomItem;

          //remove to the real data holder
          vm.removeItem = removeItem;

          //  pagination
          vm.itemsByPage=10;

          vm.rowCollectionPage = [];
          for (var j = 0; j < 200; j++) {
            vm.rowCollectionPage.push(generateRandomItem(j));
          }

          // pip
          var promise = null;
          vm.isLoading = false;
          vm.rowCollectionPip = [];
          vm.getPage = getPage;

          vm.callServer = callServer;

          vm.getPage();

          function getPage() {
            vm.rowCollectionPip=[];
            for (var j = 0; j < 20; j++) {
              vm.rowCollectionPip.push(generateRandomItem(j));
            }
          }

          function removeRow(row) {
              var index = vm.rowCollectionBasic.indexOf(row);
              if (index !== -1) {
                  vm.rowCollectionBasic.splice(index, 1);
              }
          };

          function removeItem(row) {
              var index = vm.rowCollection.indexOf(row);
              if (index !== -1) {
                  vm.rowCollection.splice(index, 1);
              }
          }

          function addRandomItem() {
              vm.rowCollection.push(generateRandomItem(id));
              id++;
          }

          function callServer(tableState) {
              //here you could create a query string from tableState
              //fake ajax call
              vm.isLoading = true;

              $timeout(function () {
                  vm.getPage();
                  vm.isLoading = false;
              }, 2000);
          }

          function generateRandomItem(id) {

              var firstname = firstnames[Math.floor(Math.random() * 3)];
              var lastname = lastnames[Math.floor(Math.random() * 3)];
              var birthdate = dates[Math.floor(Math.random() * 3)];
              var balance = Math.floor(Math.random() * 2000);

              return {
                  id: id,
                  firstName: firstname,
                  lastName: lastname,
                  birthDate: new Date(birthdate),
                  balance: balance
              }
          }

        }
})();

// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
        .module('app')
        .controller('TreeCtrl', TreeCtrl);

        TreeCtrl.$inject = ['$scope', '$timeout'];

        function TreeCtrl($scope, $timeout) {
          var tree, treedata_avm, treedata_geography, vm = $scope;

          treedata_avm = [
            {
              label: 'Animal',
              children: [
                {
                  label: 'Dog',
                  data: {
                    description: "man's best friend"
                  }
                }, {
                  label: 'Cat',
                  data: {
                    description: "Felis catus"
                  }
                }, {
                  label: 'Hippopotamus',
                  data: {
                    description: "hungry, hungry"
                  }
                }, {
                  label: 'Chicken',
                  children: ['White Leghorn', 'Rhode Island Red', 'Jersey Giant']
                }
              ]
            }, {
              label: 'Vegetable',
              data: {
                definition: "A plant or part of a plant used as food, typically as accompaniment to meat or fish, such as a cabbage, potato, carrot, or bean.",
                data_can_contain_anything: true
              },
              onSelect: function(branch) {
                return vm.output = "Vegetable: " + branch.data.definition;
              },
              children: [
                {
                  label: 'Oranges'
                }, {
                  label: 'Apples',
                  children: [
                    {
                      label: 'Granny Smith',
                      onSelect: apple_selected
                    }, {
                      label: 'Red Delicous',
                      onSelect: apple_selected
                    }, {
                      label: 'Fuji',
                      onSelect: apple_selected
                    }
                  ]
                }
              ]
            }, {
              label: 'Mineral',
              children: [
                {
                  label: 'Rock',
                  children: ['Igneous', 'Sedimentary', 'Metamorphic']
                }, {
                  label: 'Metal',
                  children: ['Aluminum', 'Steel', 'Copper']
                }, {
                  label: 'Plastic',
                  children: [
                    {
                      label: 'Thermoplastic',
                      children: ['polyethylene', 'polypropylene', 'polystyrene', ' polyvinyl chloride']
                    }, {
                      label: 'Thermosetting Polymer',
                      children: ['polyester', 'polyurethane', 'vulcanized rubber', 'bakelite', 'urea-formaldehyde']
                    }
                  ]
                }
              ]
            }
          ];
          treedata_geography = [
            {
              label: 'North America',
              children: [
                {
                  label: 'Canada',
                  children: ['Toronto', 'Vancouver']
                }, {
                  label: 'USA',
                  children: ['New York', 'Los Angeles']
                }, {
                  label: 'Mexico',
                  children: ['Mexico City', 'Guadalajara']
                }
              ]
            }, {
              label: 'South America',
              children: [
                {
                  label: 'Venezuela',
                  children: ['Caracas', 'Maracaibo']
                }, {
                  label: 'Brazil',
                  children: ['Sao Paulo', 'Rio de Janeiro']
                }, {
                  label: 'Argentina',
                  children: ['Buenos Aires', 'Cordoba']
                }
              ]
            }
          ];

          vm.my_data = treedata_avm;
          vm.try_changing_the_tree_data = try_changing_the_tree_data;

          vm.my_tree_handler = my_tree_handler;
          vm.my_tree = tree = {};
          vm.try_async_load = try_async_load;
          vm.try_adding_a_branch = try_adding_a_branch;

          function try_changing_the_tree_data() {
            if (vm.my_data === treedata_avm) {
              return vm.my_data = treedata_geography;
            } else {
              return vm.my_data = treedata_avm;
            }
          };

          function try_async_load() {
            vm.my_data = [];
            vm.doing_async = true;
            return $timeout(function() {
              if (Math.random() < 0.5) {
                vm.my_data = treedata_avm;
              } else {
                vm.my_data = treedata_geography;
              }
              vm.doing_async = false;
              return tree.expand_all();
            }, 1000);
          };

          function my_tree_handler(branch) {
            var _ref;
            vm.output = "You selected: " + branch.label;
            if ((_ref = branch.data) != null ? _ref.description : void 0) {
              return vm.output += '(' + branch.data.description + ')';
            }
          };
          function apple_selected(branch) {
            return vm.output = "APPLE! : " + branch.label;
          };

          function try_adding_a_branch() {
            var b;
            b = tree.get_selected_branch();
            return tree.add_branch(b, {
              label: 'New Branch',
              data: {
                something: 42,
                "else": 43
              }
            });
          };
        }
})();

// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
        .module('app')
        .controller('UiGridCtrl', UiGridCtrl);
        UiGridCtrl.$inject = ['$scope', 'uiGridConstants'];
        function UiGridCtrl($scope, uiGridConstants) {
          var vm = $scope;
          vm.gridOptionsSimple = {
            rowHeight: 36,
            data: [
              {
                  "name": "Ethel Price",
                  "gender": "female",
                  "company": "Enersol"
              },
              {
                  "name": "Claudine Neal",
                  "gender": "female",
                  "company": "Sealoud"
              },
              {
                  "name": "Beryl Rice",
                  "gender": "female",
                  "company": "Velity"
              },
              {
                  "name": "Wilder Gonzales",
                  "gender": "male",
                  "company": "Geekko"
              },
              {
                  "name": "Georgina Schultz",
                  "gender": "female",
                  "company": "Suretech"
              },
              {
                  "name": "Carroll Buchanan",
                  "gender": "male",
                  "company": "Ecosys"
              },
              {
                  "name": "Valarie Atkinson",
                  "gender": "female",
                  "company": "Hopeli"
              },
              {
                  "name": "Schroeder Mathews",
                  "gender": "male",
                  "company": "Polarium"
              },
              {
                  "name": "Lynda Mendoza",
                  "gender": "female",
                  "company": "Dogspa"
              },
              {
                  "name": "Sarah Massey",
                  "gender": "female",
                  "company": "Bisba"
              },
              {
                  "name": "Robles Boyle",
                  "gender": "male",
                  "company": "Comtract"
              },
              {
                  "name": "Evans Hickman",
                  "gender": "male",
                  "company": "Parleynet"
              },
              {
                  "name": "Dawson Barber",
                  "gender": "male",
                  "company": "Dymi"
              },
              {
                  "name": "Bruce Strong",
                  "gender": "male",
                  "company": "Xyqag"
              },
              {
                  "name": "Nellie Whitfield",
                  "gender": "female",
                  "company": "Exospace"
              },
              {
                  "name": "Jackson Macias",
                  "gender": "male",
                  "company": "Aquamate"
              },
              {
                  "name": "Pena Pena",
                  "gender": "male",
                  "company": "Quarx"
              },
              {
                  "name": "Lelia Gates",
                  "gender": "female",
                  "company": "Proxsoft"
              },
              {
                  "name": "Letitia Vasquez",
                  "gender": "female",
                  "company": "Slumberia"
              },
              {
                  "name": "Trevino Moreno",
                  "gender": "male",
                  "company": "Conjurica"
              }
            ]
          };
          
          vm.gridOptionsComplex = {
            enableFiltering: true,
            showFooter: true,
            rowHeight: 36,
            columnDefs: [
              { name: 'name', aggregationType: uiGridConstants.aggregationTypes.count, width: 150 },
              { name: 'gender', filter: { term: 'male' }, width: 150, enableCellEdit: false, 
                cellClass: function(grid, row, col, rowRenderIndex, colRenderIndex) {
                  if (grid.getCellValue(row,col) === 'male') {
                    return 'blue';
                  } else if (grid.getCellValue(row,col) === 'female') {
                    return 'pink';
                  }
                } 
              },
              { name: 'age', aggregationType: uiGridConstants.aggregationTypes.avg, width: 100 },
              { name: 'company', enableFiltering: false, width: 200 }
            ],
            data: [
              {
                  "name": "Ethel Price",
                  "gender": "female",
                  "company": "Enersol",
                  "age": 25
              },
              {
                  "name": "Claudine Neal",
                  "gender": "female",
                  "company": "Sealoud",
                  "age": 19
              },
              {
                  "name": "Beryl Rice",
                  "gender": "female",
                  "company": "Velity",
                  "age": 44
              },
              {
                  "name": "Wilder Gonzales",
                  "gender": "male",
                  "company": "Geekko",
                  "age": 26
              },
              {
                  "name": "Georgina Schultz",
                  "gender": "female",
                  "company": "Suretech",
                  "age": 53
              },
              {
                  "name": "Carroll Buchanan",
                  "gender": "male",
                  "company": "Ecosys",
                  "age": 64
              },
              {
                  "name": "Valarie Atkinson",
                  "gender": "female",
                  "company": "Hopeli",
                  "age": 35
              },
              {
                  "name": "Schroeder Mathews",
                  "gender": "male",
                  "company": "Polarium",
                  "age": 29
              },
              {
                  "name": "Lynda Mendoza",
                  "gender": "female",
                  "company": "Dogspa",
                  "age": 49
              },
              {
                  "name": "Sarah Massey",
                  "gender": "female",
                  "company": "Bisba",
                  "age": 40
              },
              {
                  "name": "Robles Boyle",
                  "gender": "male",
                  "company": "Comtract",
                  "age": 32
              },
              {
                  "name": "Evans Hickman",
                  "gender": "male",
                  "company": "Parleynet",
                  "age": 38
              },
              {
                  "name": "Dawson Barber",
                  "gender": "male",
                  "company": "Dymi",
                  "age": 21
              },
              {
                  "name": "Bruce Strong",
                  "gender": "male",
                  "company": "Xyqag",
                  "age": 61
              },
              {
                  "name": "Nellie Whitfield",
                  "gender": "female",
                  "company": "Exospace",
                  "age": 54
              },
              {
                  "name": "Jackson Macias",
                  "gender": "male",
                  "company": "Aquamate",
                  "age": 49
              },
              {
                  "name": "Pena Pena",
                  "gender": "male",
                  "company": "Quarx",
                  "age": 25
              },
              {
                  "name": "Lelia Gates",
                  "gender": "female",
                  "company": "Proxsoft",
                  "age": 54
              },
              {
                  "name": "Alfred Oscar",
                  "gender": "male",
                  "company": "Transprop",
                  "age": 34
              },
              {
                  "name": "John Alfred",
                  "gender": "male",
                  "company": "Haymans",
                  "age": 70
              },
              {
                  "name": "Leonie Warren",
                  "gender": "female",
                  "company": "Hilltop",
                  "age": 25
              },
              {
                  "name": "Belinda Gosford",
                  "gender": "female",
                  "company": "Archison",
                  "age": 42
              },
              {
                  "name": "Tracey Misoni",
                  "gender": "female",
                  "company": "Verizona",
                  "age": 34
              },
              {
                  "name": "Trevino Moreno",
                  "gender": "male",
                  "company": "Conjurica",
                  "age": 31
              }
            ]
          };
        }
})();

// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
        .module('app')
        .controller('UploadCtrl', UploadCtrl);

        UploadCtrl.$inject = ['$scope', 'FileUploader'];

        function UploadCtrl($scope, FileUploader) {
            var uploader = $scope.uploader = new FileUploader({
                url: 'scripts/controllers/upload.php'
            });

            // FILTERS

            uploader.filters.push({
                name: 'customFilter',
                fn: function(item /*{File|FileLikeObject}*/, options) {
                    return this.queue.length < 10;
                }
            });

            // CALLBACKS

            uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
                console.info('onWhenAddingFileFailed', item, filter, options);
            };
            uploader.onAfterAddingFile = function(fileItem) {
                console.info('onAfterAddingFile', fileItem);
            };
            uploader.onAfterAddingAll = function(addedFileItems) {
                console.info('onAfterAddingAll', addedFileItems);
            };
            uploader.onBeforeUploadItem = function(item) {
                console.info('onBeforeUploadItem', item);
            };
            uploader.onProgressItem = function(fileItem, progress) {
                console.info('onProgressItem', fileItem, progress);
            };
            uploader.onProgressAll = function(progress) {
                console.info('onProgressAll', progress);
            };
            uploader.onSuccessItem = function(fileItem, response, status, headers) {
                console.info('onSuccessItem', fileItem, response, status, headers);
            };
            uploader.onErrorItem = function(fileItem, response, status, headers) {
                console.info('onErrorItem', fileItem, response, status, headers);
            };
            uploader.onCancelItem = function(fileItem, response, status, headers) {
                console.info('onCancelItem', fileItem, response, status, headers);
            };
            uploader.onCompleteItem = function(fileItem, response, status, headers) {
                console.info('onCompleteItem', fileItem, response, status, headers);
            };
            uploader.onCompleteAll = function() {
                console.info('onCompleteAll');
            };

            console.info('uploader', uploader);
        }
})();

var userRequestsCtrl = ['$state', '$scope','RootService','adminService',  function($state, scope, clubService,  adminService){
		console.log('userRequestsCtrl' );


		scope.init = function(){
			scope.userRequests = null;
			getUserRequests();

		};


		function getUserRequests(){
			var request = clubService.sendRequest('GET' , '/items?active=false');
			request.then(function(response){
				scope.userRequests = response;
				console.log('userRequests', response);
			}, function(error){
				clubService.sendRequest('error getting user requests', 'error');
			})
		}

		scope.init();



}];


angular.module('app')
	.controller('userRequestsCtrl', userRequestsCtrl);
var vendorsListCtrl = ['$state', '$scope', function($state, scope){
		console.log('vendorsListCtrl' );
}];


angular.module('app')
	.controller('vendorsListCtrl', vendorsListCtrl);
// code style: https://github.com/johnpapa/angular-styleguide 

(function() {
    'use strict';
    angular
      .module('app')
      .controller('XeditableCtrl', XeditableCtrl );
      
      XeditableCtrl.$inject = ['$scope', '$filter', '$http', 'editableOptions', 'editableThemes'];

      function XeditableCtrl($scope, $filter, $http, editableOptions, editableThemes){

        editableOptions.theme = 'bs3';
        editableOptions.icon_set = 'font-awesome';
        editableThemes.bs3.inputClass = 'form-control-sm';
        editableThemes.bs3.buttonsClass = 'btn-sm';

        var vm = $scope;

        vm.html5 = {
          email: 'email@example.com',
          tel: '123-45-67',
          number: 29,
          range: 10,
          url: 'http://example.com',
          search: 'blabla',
          color: '#6a4415',
          date: null,
          time: '12:30',
          datetime: null,
          month: null,
          week: null
        };

        vm.user = {
        	name: 'awesome',
        	desc: 'Awesome user \ndescription!',
          status: 2,
          agenda: 1,
          remember: false
        }; 

        vm.statuses = [
          {value: 1, text: 'status1'},
          {value: 2, text: 'status2'},
          {value: 3, text: 'status3'}
        ];

        vm.agenda = [
          {value: 1, text: 'male'},
          {value: 2, text: 'female'}
        ];

        vm.showStatus = showStatus;
        vm.showStatus = showStatus;
        vm.checkName = checkName;
        vm.saveUser = saveUser;
        // remove user
        vm.removeUser = removeUser;
        // add user
        vm.addUser = addUser;
        vm.showGroup = showGroup;

        // editable table
        vm.users = [
          {id: 1, name: 'awesome user1', status: 2, group: 4, groupName: 'admin'},
          {id: 2, name: 'awesome user2', status: undefined, group: 3, groupName: 'vip'},
          {id: 3, name: 'awesome user3', status: 2, group: null}
        ];

        vm.groups = [];
        vm.loadGroups = loadGroups;
        vm.showAgenda = showAgenda;

        function showStatus() {
          var selected = $filter('filter')(vm.statuses, {value: vm.user.status});
          return (vm.user.status && selected.length) ? selected[0].text : 'Not set';
        };

        function showAgenda() {
          var selected = $filter('filter')(vm.agenda, {value: vm.user.agenda});
          return (vm.user.agenda && selected.length) ? selected[0].text : 'Not set';
        };

        function loadGroups() {
          return vm.groups.length ? null : $http.get('api/groups').success(function(data) {
            vm.groups = data;
          });
        };

        function showGroup(user) {
          if(user.group && vm.groups.length) {
            var selected = $filter('filter')(vm.groups, {id: user.group});
            return selected.length ? selected[0].text : 'Not set';
          } else {
            return user.groupName || 'Not set';
          }
        };

        function showStatus(user) {
          var selected = [];
          if(user && user.status) {
            selected = $filter('filter')(vm.statuses, {value: user.status});
          }
          return selected.length ? selected[0].text : 'Not set';
        }; 

        function checkName(data, id) {
          if (id === 2 && data !== 'awesome') {
            return "Username 2 should be `awesome`";
          }
        };

        function saveUser(data, id) {
          //vm.user not updated yet
          angular.extend(data, {id: id});
          // return $http.post('api/saveUser', data);
        };

        function removeUser(index) {
          vm.users.splice(index, 1);
        };

        function addUser() {
          vm.inserted = {
            id: vm.users.length+1,
            name: '',
            status: null,
            group: null 
          };
          vm.users.push(vm.inserted);
        };

      }
})();
